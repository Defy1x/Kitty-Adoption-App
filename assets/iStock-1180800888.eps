%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cat_meditation.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: Irina Mir
%%CreationDate: 10/6/19
%%BoundingBox: 0 0 600 600
%%HiResBoundingBox: 0 0 600 600
%%CropBox: 0 0 600 600
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%Exiv2Version: 001900
%Exiv2Website: http://www.exiv2.org/
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="XMP Core 4.4.0-Exiv2">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:MetadataDate="2019-10-01T23:33:15-03:00"
   xmp:ModifyDate="2019-10-01T23:33:15-03:00"
   xmp:CreateDate="2019-10-01T23:33:15-03:00"
   xmp:CreatorTool="Adobe Illustrator CC 2015 (Macintosh)"
   xmpMM:InstanceID="xmp.iid:6a381326-f87e-4950-bd02-bf4d9562f86a"
   xmpMM:DocumentID="xmp.did:6a381326-f87e-4950-bd02-bf4d9562f86a"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 10.01">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Cartoon cat meditating</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Cat sitting in meditation, cartoon drawing. Cute funny ginger kitty meditating in lotus position, vector clip art illustration.</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>cat,  cute,  meditation,  yoga,  vector,  cartoon,  illustration,  funny,  art,  drawing,  pose,  position,  sketch,  character,  doodle,  fun,  isolated,  peaceful,  lotus,  posture,  practice,  relaxation,  asana,  relax,  lifestyle,  meditating,  spiritual,  zen,  balance,  buddha,  calm,  clip art,  peace,  relaxing,  spirituality,  wellness,  wellbeing,  smiling,  buddhism,  buddhist,  kitty,  yogi,  sitting,  mindful,  simple,  enlightenment,  tranquility,  hand drawn,  mindfulness,  ginger</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8R82/8AOQerHzJc&#xA;aD5C0Qa7JYki8vW5vESuzCNYyvwq23NmoT0HQnEzauMOZdvp+y+KPFM1aaeQf+chNC1y/XRPMdq/&#xA;lzX+QjENwSIJJDsFV3CsjHsrj2BJyzHnjJq1PZs4C4+qL1rL3WuxV2KuxV2KqF/f2Wn2U19fTx2t&#xA;nbqZJ7iVgiIo6lmOwxJTGJkaHN4jrv8Azkjf32pS2H5e+X5NbW33mvpkk9MgfyRJxYA9i7An+XMT&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:1f9fff7b-f1e6-454c-9a8f-72b9d16c929d"
    stRef:documentID="xmp.did:1f9fff7b-f1e6-454c-9a8f-72b9d16c929d"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:1f9fff7b-f1e6-454c-9a8f-72b9d16c929d"
      stEvt:when="2019-10-01T23:17:10-03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2015 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:6a381326-f87e-4950-bd02-bf4d9562f86a"
      stEvt:when="2019-10-01T23:33:15-03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2015 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="600.000000"
    stDim:h="600.000000"
    stDim:unit="Points"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="35"
         xmpG:green="31"
         xmpG:blue="32"/>
        <rdf:li
         xmpG:swatchName="R=248 G=225 B=209"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="248"
         xmpG:green="225"
         xmpG:blue="209"/>
        <rdf:li
         xmpG:swatchName="R=250 G=199 B=92"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="250"
         xmpG:green="199"
         xmpG:blue="92"/>
        <rdf:li
         xmpG:swatchName="R=241 G=190 B=167"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="241"
         xmpG:green="190"
         xmpG:blue="167"/>
        <rdf:li
         xmpG:swatchName="R=104 G=11 B=11"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="104"
         xmpG:green="11"
         xmpG:blue="11"/>
        <rdf:li
         xmpG:swatchName="R=221 G=121 B=54"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="221"
         xmpG:green="121"
         xmpG:blue="54"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -600 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 600 li
600 600 li
600 0 li
cp
clp
600 600 mo
0 600 li
0 0 li
600 0 li
600 600 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
470.235 495.253 mo
470.235 511.682 394.018 525 300 525 cv
205.982 525 129.764 511.682 129.764 495.253 cv
129.764 478.824 205.982 465.506 300 465.506 cv
394.018 465.506 470.235 478.824 470.235 495.253 cv
.972549 .882353 .819608 rgb
f
408.008 394.908 mo
406.341 389.979 411.626 380.51 411.656 375.545 cv
411.706 367.262 409.569 358.913 407.177 351.044 cv
403.031 337.41 397.529 323.035 389.701 311.028 cv
373.138 285.626 369.273 281.034 368.701 274.749 cv
223.014 271.892 li
222.443 279.32 214.119 292.826 202.528 309.314 cv
193.263 322.493 185.879 337.504 182.117 353.21 cv
180.189 361.259 179.213 369.65 180.105 377.912 cv
180.636 382.821 186.672 393.451 183.11 397.161 cv
181.365 398.979 178.817 399.716 176.45 400.582 cv
167.105 404.002 158.835 410.699 154.311 419.562 cv
149.045 429.877 150.898 438.918 153.985 449.359 cv
155.939 455.966 157.299 462.149 161.047 468.091 cv
167.504 478.325 177.771 485.087 189.105 488.877 cv
221.633 499.754 261.252 491.946 292.716 480.711 cv
306.445 475.808 404.785 469.207 417.835 462.714 cv
426.837 458.235 430.537 448.968 430.189 439.316 cv
430.011 434.394 428.228 430.028 427.592 425.232 cv
426.873 419.805 427.906 414.059 425.415 408.965 cv
423.754 405.57 420.828 403.245 417.731 401.223 cv
415.469 399.746 409.881 398.108 408.462 395.87 cv
408.274 395.573 408.124 395.251 408.008 394.908 cv
.980392 .780392 .360784 rgb
f
256.722 373.588 mo
261.864 377.016 267.006 378.73 272.148 377.016 cv
272.148 380.444 273.862 383.872 272.148 387.3 cv
270.434 389.014 267.006 390.728 265.292 392.441 cv
258.436 406.153 272.577 422.864 284.574 426.292 cv
294.858 428.006 302.999 426.721 313.283 421.579 cv
318.425 418.151 325.281 414.723 328.709 409.581 cv
332.708 391.87 326.138 380.444 323.567 378.158 cv
349.277 378.158 362.703 354.734 355.847 332.453 cv
355.847 308.743 348.972 292.614 340.707 275.463 cv
251.152 277.177 li
234.012 309.743 217.273 356.23 256.722 373.588 cv
1 1 1 rgb
f
354.099 312.713 mo
352.832 305.839 350.943 299.56 348.659 293.518 cv
355.456 291.044 362.061 287.91 368.278 284.043 cv
369.633 286.555 371.548 289.608 374.237 293.732 cv
374.045 293.982 373.854 294.235 373.662 294.49 cv
368.047 301.686 361.423 307.758 354.099 312.713 cv
237.252 309.361 mo
230.357 304.105 224.171 297.809 218.983 290.479 cv
221.127 286.813 222.769 283.642 223.963 280.87 cv
229.482 284.5 235.325 287.504 241.335 289.984 cv
242.319 290.394 243.308 290.789 244.302 291.171 cv
241.646 297.077 239.21 303.208 237.252 309.361 cv
.92549 .580392 .235294 rgb
f
298.235 329.227 mo
276.443 329.227 254.599 322.585 237.252 309.361 cv
239.21 303.208 241.646 297.077 244.302 291.171 cv
264.314 298.861 286.079 300.972 304.197 301.024 cv
304.203 301.024 304.205 301.024 304.21 301.024 cv
304.23 301.024 304.257 301.024 304.277 301.024 cv
304.284 301.024 304.29 301.024 304.297 301.024 cv
304.317 301.024 304.338 301.024 304.358 301.024 cv
304.366 301.024 304.373 301.024 304.38 301.024 cv
304.403 301.024 304.424 301.024 304.447 301.024 cv
304.451 301.024 304.455 301.024 304.459 301.024 cv
304.485 301.024 304.511 301.025 304.537 301.025 cv
304.546 301.025 304.552 301.025 304.561 301.025 cv
304.578 301.025 304.6 301.025 304.617 301.025 cv
304.626 301.025 304.635 301.025 304.644 301.025 cv
304.661 301.025 304.679 301.025 304.696 301.025 cv
304.707 301.025 304.715 301.025 304.726 301.025 cv
304.743 301.025 304.759 301.025 304.777 301.025 cv
304.787 301.025 304.795 301.025 304.805 301.025 cv
304.831 301.025 304.856 301.025 304.882 301.025 cv
304.882 301.025 li
304.882 301.025 304.882 301.025 304.882 301.025 cv
304.882 301.025 li
304.882 301.025 li
304.911 301.025 304.944 301.025 304.973 301.025 cv
304.981 301.025 304.989 301.025 304.998 301.025 cv
305.027 301.025 305.055 301.025 305.083 301.025 cv
305.086 301.025 305.087 301.025 305.089 301.025 cv
305.121 301.025 305.15 301.025 305.181 301.024 cv
305.19 301.024 305.195 301.024 305.203 301.024 cv
305.232 301.024 305.26 301.024 305.289 301.024 cv
305.291 301.024 305.294 301.024 305.296 301.024 cv
305.328 301.024 305.358 301.024 305.39 301.024 cv
305.394 301.024 305.402 301.024 305.406 301.024 cv
305.438 301.024 305.468 301.023 305.5 301.023 cv
305.501 301.023 li
305.536 301.023 305.564 301.023 305.598 301.023 cv
305.603 301.023 305.608 301.023 305.612 301.023 cv
305.678 301.022 305.743 301.022 305.809 301.022 cv
305.813 301.022 li
319.724 300.924 334.598 298.635 348.659 293.518 cv
350.943 299.56 352.832 305.839 354.099 312.713 cv
337.801 323.738 318.04 329.227 298.235 329.227 cv
.945098 .745098 .654902 rgb
f
291.981 428.189 mo
284.024 428.188 276.053 425.237 270.141 419.892 cv
269.151 418.997 267.793 417.508 266.916 415.928 cv
267.259 414.876 267.445 413.76 267.476 412.623 cv
271.629 419.224 278.386 424.524 284.574 426.292 cv
287.401 426.763 290.067 427.008 292.659 427.008 cv
299.204 427.008 305.284 425.449 312.333 422.046 cv
307.883 424.337 303.35 426.476 298.474 427.513 cv
296.338 427.967 294.161 428.189 291.981 428.189 cv
313.456 421.464 mo
318.578 418.074 325.319 414.666 328.709 409.581 cv
329.438 406.353 329.815 403.335 329.93 400.542 cv
375.987 396.733 401.169 371.814 402.678 347.291 cv
408.662 367.355 408.856 385.328 404.925 393.409 cv
404.567 394.147 404.497 394.95 404.671 395.691 cv
400.204 395.14 395.606 394.797 391.021 394.797 cv
387.422 394.797 383.829 395.008 380.319 395.497 cv
377.282 395.92 374.306 396.55 371.436 397.429 cv
352.388 403.266 333.874 410.842 316.198 420.033 cv
315.285 420.507 314.372 420.987 313.456 421.464 cv
.92549 .580392 .235294 rgb
f
292.659 427.008 mo
290.067 427.008 287.401 426.763 284.574 426.292 cv
278.386 424.524 271.629 419.224 267.476 412.623 cv
267.498 411.819 267.442 411.005 267.31 410.196 cv
268.038 409.175 268.975 408.276 269.831 408.276 cv
270.03 408.276 270.226 408.325 270.412 408.433 cv
268.724 407.461 267.517 405.875 266.846 404.057 cv
266.811 401.887 266.83 399.304 266.969 396.869 cv
268.616 392.973 272.597 390.328 276.781 389.643 cv
274.068 391.982 280.96 397.874 296 399.696 cv
303.562 400.612 310.74 401.042 317.535 401.042 cv
321.822 401.042 325.953 400.871 329.93 400.542 cv
329.815 403.335 329.438 406.353 328.709 409.581 cv
325.319 414.666 318.578 418.074 313.456 421.464 cv
313.082 421.659 312.708 421.853 312.333 422.046 cv
305.284 425.449 299.204 427.008 292.659 427.008 cv
.945098 .745098 .654902 rgb
f
165.877 476.931 mo
158.881 469.946 154.018 460.16 152.253 446.797 cv
151.977 444.704 151.817 442.651 151.769 440.64 cv
152.313 443.473 153.098 446.358 153.985 449.359 cv
155.939 455.966 157.299 462.149 161.047 468.091 cv
163.012 471.205 165.33 473.998 167.923 476.483 cv
167.234 476.631 166.55 476.781 165.877 476.931 cv
f
196.641 491.04 mo
184.562 489.199 173.837 484.878 165.877 476.931 cv
166.55 476.781 167.234 476.631 167.923 476.483 cv
173.852 482.165 181.22 486.24 189.105 488.877 cv
191.578 489.704 194.092 490.423 196.641 491.04 cv
.917647 .658823 .537255 rgb
f
212.07 492.132 mo
206.765 492.132 201.588 491.794 196.641 491.04 cv
194.092 490.423 191.578 489.704 189.105 488.877 cv
181.22 486.24 173.852 482.165 167.923 476.483 cv
165.33 473.998 163.012 471.205 161.047 468.091 cv
157.299 462.149 155.939 455.966 153.985 449.359 cv
153.098 446.358 152.313 443.473 151.769 440.64 cv
151.688 437.232 151.926 433.947 152.457 430.802 cv
154.984 446.338 178.77 461.359 209.242 461.359 cv
213.523 461.359 217.939 461.062 222.443 460.429 cv
222.512 460.977 222.591 461.58 222.68 462.23 cv
219.737 471.697 221.361 481.291 226.448 489.106 cv
226.909 489.832 227.401 490.543 227.922 491.237 cv
222.572 491.81 217.262 492.132 212.07 492.132 cv
.92549 .580392 .235294 rgb
f
265.156 419.171 mo
265.033 419.107 264.912 419.038 264.788 418.976 cv
264.683 418.821 li
263.911 417.678 262.749 416.925 261.387 416.925 cv
261.201 416.925 261.011 416.94 260.818 416.969 cv
260.662 416.992 260.503 417.03 260.344 417.074 cv
260.256 417.041 li
255.988 411.687 249.978 408.382 243.605 405.427 cv
239.056 403.318 236.982 401.121 232.411 399.058 cv
224.45 395.465 215.614 392.945 206.795 392.945 cv
205.096 392.945 203.398 393.039 201.707 393.236 cv
197.973 393.672 192.53 396.609 188.198 396.609 cv
187.854 396.609 187.518 396.59 187.19 396.551 cv
188.153 395.563 188.461 394.046 187.848 392.719 cv
181.845 379.712 181.914 363.349 187.574 345.863 cv
187.98 356.609 194.18 371.521 212.466 382.752 cv
222.469 388.895 236.774 393.153 249.593 393.153 cv
256.742 393.153 263.429 391.829 268.649 388.768 cv
268.329 389.115 268.062 389.702 267.84 390.461 cv
266.867 391.121 265.952 391.781 265.292 392.441 cv
262.215 398.595 263.368 405.353 266.657 411.243 cv
266.315 411.873 266.093 412.448 266.059 412.784 cv
265.959 413.773 266.33 414.871 266.916 415.928 cv
266.53 417.111 265.945 418.213 265.156 419.171 cv
f
266.657 411.243 mo
263.368 405.353 262.215 398.595 265.292 392.441 cv
265.952 391.781 266.867 391.121 267.84 390.461 cv
267.377 392.044 267.11 394.379 266.969 396.869 cv
266.938 396.941 266.909 397.013 266.88 397.086 cv
266.007 399.29 266.029 401.845 266.846 404.057 cv
266.89 406.762 267.017 408.827 267.101 409.17 cv
267.185 409.51 267.255 409.853 267.31 410.196 cv
267.065 410.541 266.843 410.9 266.657 411.243 cv
.945098 .745098 .654902 rgb
f
266.916 415.928 mo
266.33 414.871 265.959 413.773 266.059 412.784 cv
266.093 412.448 266.315 411.873 266.657 411.243 cv
266.917 411.709 267.19 412.169 267.476 412.623 cv
267.445 413.76 267.259 414.876 266.916 415.928 cv
.87451 .431373 .152941 rgb
f
267.476 412.623 mo
267.19 412.169 266.917 411.709 266.657 411.243 cv
266.843 410.9 267.065 410.541 267.31 410.196 cv
267.442 411.005 267.498 411.819 267.476 412.623 cv
266.846 404.057 mo
266.029 401.845 266.007 399.29 266.88 397.086 cv
266.909 397.013 266.938 396.941 266.969 396.869 cv
266.83 399.304 266.811 401.887 266.846 404.057 cv
.894118 .556863 .427451 rgb
f
268.649 388.768 mo
268.821 388.581 269.009 388.464 269.214 388.427 cv
269.028 388.543 268.839 388.657 268.649 388.768 cv
.92549 .580392 .235294 rgb
f
184.738 397.583 mo
183.442 397.583 182.202 396.845 181.623 395.592 cv
170.719 371.966 177.486 338.975 199.724 307.342 cv
207.979 295.599 219.02 279.122 219.597 271.629 cv
219.742 269.742 221.384 268.334 223.277 268.474 cv
225.165 268.62 226.577 270.268 226.433 272.155 cv
225.873 279.425 219.76 290.762 205.333 311.286 cv
184.516 340.895 177.98 371.338 187.848 392.719 cv
188.641 394.438 187.891 396.475 186.172 397.269 cv
185.707 397.483 185.219 397.583 184.738 397.583 cv
.407843 .0431373 .0431373 rgb
f
408.007 398.337 mo
407.503 398.337 406.992 398.226 406.509 397.992 cv
404.806 397.163 404.098 395.111 404.925 393.409 cv
411.063 380.792 407.146 344.06 386.828 312.901 cv
383.696 308.095 381.018 304.037 378.732 300.57 cv
368.562 285.155 365.829 281.012 365.286 275.06 cv
365.116 273.174 366.505 271.506 368.39 271.335 cv
370.283 271.164 371.945 272.552 372.115 274.437 cv
372.5 278.675 375.033 282.513 384.455 296.796 cv
386.748 300.271 389.431 304.339 392.573 309.155 cv
413.147 340.711 418.846 380.465 411.092 396.408 cv
410.497 397.627 409.277 398.337 408.007 398.337 cv
f
422.181 403.437 mo
444.777 409.544 461.301 441.839 444.777 475.499 cv
428.288 509.087 391.035 515.805 351.951 510.309 cv
308.806 504.242 299.975 502.343 267.675 506.034 cv
224.926 510.92 203.251 466.558 240.804 439.468 cv
253.723 430.149 266.324 428.105 279.014 428.336 cv
303.714 428.787 326.922 440.97 340.958 446.186 cv
363.797 454.673 410.821 457.546 422.792 432.14 cv
426.202 424.901 428.899 416.262 422.181 403.437 cv
.980392 .780392 .360784 rgb
f
442.886 479.076 mo
442.886 479.076 li
443.543 477.919 444.174 476.727 444.777 475.499 cv
445.479 474.069 446.121 472.642 446.706 471.219 cv
446.121 472.642 445.479 474.069 444.777 475.499 cv
444.174 476.727 443.543 477.919 442.886 479.076 cv
.945098 .745098 .654902 rgb
f
375.121 512.024 mo
375.121 512.024 li
403.785 512.024 429.172 503.208 442.886 479.076 cv
442.886 479.076 li
429.171 503.21 403.788 512.025 375.121 512.024 cv
346.058 509.477 mo
338.095 508.349 331.385 507.389 325.466 506.607 cv
331.385 507.389 338.095 508.349 346.058 509.477 cv
325.457 506.606 mo
325.422 506.602 325.386 506.597 325.352 506.592 cv
325.386 506.597 325.422 506.602 325.457 506.606 cv
267.828 506.017 mo
278.906 504.754 287.221 504.151 295.12 504.151 cv
298.296 504.151 301.406 504.249 304.6 504.44 cv
301.405 504.249 298.297 504.151 295.12 504.151 cv
287.221 504.151 278.904 504.754 267.828 506.017 cv
.917647 .658823 .537255 rgb
f
222.802 463.102 mo
222.759 462.803 222.719 462.512 222.68 462.23 cv
223.424 459.836 224.459 457.451 225.804 455.104 cv
225.76 455.423 225.724 455.739 225.694 456.053 cv
224.446 458.384 223.486 460.745 222.802 463.102 cv
.92549 .580392 .235294 rgb
f
451.477 447.839 mo
451.472 425.687 438.406 407.842 422.214 403.446 cv
438.406 407.842 451.472 425.687 451.477 447.839 cv
.945098 .745098 .654902 rgb
f
226.448 489.106 mo
221.361 481.291 219.737 471.697 222.68 462.23 cv
222.719 462.512 222.759 462.803 222.802 463.102 cv
220.123 472.339 221.655 481.558 226.448 489.106 cv
.87451 .431373 .152941 rgb
f
375.121 512.024 mo
367.576 512.023 359.797 511.412 351.951 510.309 cv
349.913 510.022 347.949 509.745 346.058 509.477 cv
338.095 508.349 331.385 507.389 325.466 506.607 cv
325.463 506.607 325.46 506.607 325.457 506.606 cv
325.422 506.602 325.386 506.597 325.352 506.592 cv
317.361 505.538 310.819 504.812 304.6 504.44 cv
301.406 504.249 298.296 504.151 295.12 504.151 cv
287.221 504.151 278.906 504.754 267.828 506.017 cv
267.777 506.022 267.726 506.028 267.675 506.034 cv
267.675 506.034 li
267.675 506.034 li
265.518 506.281 263.419 506.399 261.371 506.399 cv
245.494 506.399 233.051 499.248 226.448 489.106 cv
221.655 481.558 220.123 472.339 222.802 463.102 cv
223.486 460.745 224.446 458.384 225.694 456.053 cv
224.117 472.787 242.443 483.446 260.004 483.446 cv
264.188 483.446 268.33 482.84 272.148 481.568 cv
284.451 478.123 294.782 476.84 304.174 476.84 cv
329.745 476.84 348.312 486.363 380.471 487.703 cv
382.732 487.888 384.945 487.978 387.111 487.978 cv
428.542 487.977 452.25 455.061 443.545 423.721 cv
441.713 418.225 437.354 414.102 433.689 410.438 cv
432.967 409.716 432.096 409.516 431.169 409.516 cv
430.597 409.516 430.003 409.592 429.409 409.668 cv
428.815 409.744 428.221 409.82 427.649 409.82 cv
426.822 409.82 426.04 409.662 425.367 409.118 cv
425.19 405.055 424.953 408.729 422.181 403.437 cv
422.181 403.437 li
422.192 403.44 422.203 403.443 422.214 403.446 cv
438.406 407.842 451.472 425.687 451.477 447.839 cv
451.478 455.263 450.012 463.171 446.706 471.219 cv
446.121 472.642 445.479 474.069 444.777 475.499 cv
444.174 476.727 443.543 477.919 442.886 479.076 cv
429.172 503.208 403.785 512.024 375.121 512.024 cv
.92549 .580392 .235294 rgb
f
295.167 500.709 mo
308.646 500.709 320.924 502.45 343.575 505.662 cv
352.427 506.914 li
383.619 511.303 424.438 509.152 441.7 473.989 cv
449.343 458.421 450.094 441.474 443.762 427.492 cv
440.552 420.404 435.663 414.557 429.94 410.739 cv
431.683 416.963 430.998 423.949 427.793 430.753 cv
421.919 443.218 408.551 450.885 389.133 452.926 cv
374.491 454.462 356.193 452.626 340.185 448.011 cv
336.566 446.967 332.352 445.39 327.473 443.564 cv
305.195 435.225 271.529 422.623 242.738 442.299 cv
227.525 452.695 221.259 467.7 226.386 481.461 cv
230.982 493.798 245.41 505.121 267.286 502.627 cv
278.647 501.33 287.121 500.709 295.167 500.709 cv
cp
375.237 515.465 mo
367.774 515.465 359.848 514.881 351.473 513.703 cv
342.612 512.451 li
307.127 507.419 297.589 506.064 268.064 509.44 cv
242.512 512.361 225.49 498.694 219.961 483.854 cv
215.037 470.639 217.419 451.295 238.87 436.638 cv
270.601 414.954 307.706 428.845 329.876 437.144 cv
334.622 438.919 338.72 440.453 342.085 441.423 cv
357.289 445.809 374.609 447.563 388.417 446.107 cv
400.205 444.868 415.53 440.692 421.59 427.831 cv
423.416 423.956 426.877 414.042 419.596 405.69 cv
418.605 404.551 418.473 402.899 419.275 401.619 cv
420.075 400.34 421.621 399.736 423.074 400.128 cv
434.531 403.224 444.348 412.167 450.007 424.665 cv
457.188 440.518 456.403 459.598 447.853 477.01 cv
435.395 502.39 410.512 515.465 375.237 515.465 cv
cp
.407843 .0431373 .0431373 rgb
f
295.153 433.125 mo
293.56 433.125 292.132 432.01 291.798 430.388 cv
291.417 428.534 292.61 426.721 294.465 426.339 cv
303.751 424.428 316.94 417.629 330.902 410.431 cv
347.018 402.124 363.681 393.534 376.451 391.501 cv
384.892 390.155 413.336 386.898 424.857 401.294 cv
426.04 402.774 425.801 404.93 424.323 406.113 cv
422.845 407.293 420.687 407.055 419.504 405.579 cv
414.705 399.582 401.164 394.51 377.529 398.273 cv
365.844 400.131 349.678 408.465 334.044 416.524 cv
319.65 423.944 306.055 430.952 295.847 433.054 cv
295.614 433.103 295.381 433.125 295.153 433.125 cv
cp
f
212.553 496.525 mo
198.201 496.526 183.356 492.247 171.879 484.396 cv
158.849 475.485 150.887 462.639 148.855 447.245 cv
146.765 431.421 150.922 416.857 160.559 406.239 cv
171.235 394.475 187.621 388.366 206.723 389.019 cv
230.649 389.844 249.456 402.657 264.567 412.954 cv
272.645 418.457 279.622 423.211 285.826 425.213 cv
287.628 425.794 288.618 427.725 288.037 429.528 cv
287.456 431.329 285.523 432.323 283.722 431.737 cv
276.579 429.434 269.223 424.421 260.706 418.62 cv
245.577 408.311 228.428 396.626 206.487 395.871 cv
189.433 395.272 174.934 400.6 165.636 410.847 cv
157.376 419.947 153.83 432.556 155.652 446.348 cv
157.423 459.757 164.372 470.956 175.749 478.737 cv
189.749 488.313 210.167 492.056 226.556 488.049 cv
228.394 487.598 230.25 488.725 230.699 490.564 cv
231.148 492.402 230.022 494.258 228.182 494.707 cv
223.175 495.932 217.898 496.525 212.553 496.525 cv
cp
f
341.891 110.654 mo
314.855 101.603 274.11 105.224 255.523 110.654 cv
255.523 110.654 240.348 92.5525 225.109 86.7102 cv
221.883 85.4737 218.249 86.3096 215.589 88.6253 cv
205.359 97.531 183.225 138.712 183.782 195.733 cv
184.675 287.142 257.569 301.025 304.882 301.025 cv
352.196 301.025 411.175 275.687 411.338 199.655 cv
411.464 140.522 398.198 107.853 383.421 90.4709 cv
380.677 87.2431 373.999 86.3427 370.343 88.2702 cv
363.218 92.0262 351.289 99.403 341.891 110.654 cv
.980392 .780392 .360784 rgb
f
318.869 212.886 mo
311.788 206.277 308.654 200.118 299.426 198.816 cv
296.832 198.451 294.6 198.78 291.346 200.402 cv
283.993 204.066 282.011 210.167 275.89 214.915 cv
271.045 218.674 264.433 218.586 257.871 216.776 cv
248.258 214.124 237.318 217.307 228.209 221.98 cv
210.171 231.235 193.81 250.038 211.48 270.67 cv
237.23 295.796 275.865 301.025 304.882 301.025 cv
340.048 301.025 381.638 287.006 400.754 248.6 cv
400.546 247.787 400.102 247.875 399.644 247.964 cv
399.184 248.053 398.71 248.141 398.444 247.323 cv
397.562 225.601 376.42 216.605 358.807 214.64 cv
349.099 213.557 343.968 212.938 334.804 215.871 cv
329.147 217.681 323.125 216.858 318.869 212.886 cv
1 1 1 rgb
f
218.228 276.772 mo
198.155 261.203 183.668 236.039 183.782 195.733 cv
183.782 195.733 li
184.174 235.825 198.42 261.006 218.28 276.64 cv
218.263 276.684 218.245 276.729 218.228 276.772 cv
402.72 244.445 mo
407.551 233.354 410.585 220.377 411.215 205.285 cv
411.857 202.236 412.294 199.334 412.557 196.638 cv
413.708 215.063 409.834 230.981 402.72 244.445 cv
.945098 .745098 .654902 rgb
f
241.335 289.984 mo
235.325 287.504 229.482 284.5 223.963 280.87 cv
223.975 280.842 223.987 280.813 223.999 280.785 cv
229.492 284.447 235.32 287.48 241.335 289.984 cv
.87451 .431373 .152941 rgb
f
223.963 280.87 mo
222.01 279.585 220.092 278.218 218.228 276.772 cv
218.245 276.729 218.263 276.684 218.28 276.64 cv
220.14 278.105 222.047 279.484 223.999 280.785 cv
223.987 280.813 223.975 280.842 223.963 280.87 cv
.384314 .0313725 .027451 rgb
f
304.882 301.025 mo
304.858 301.025 304.834 301.025 304.81 301.025 cv
304.834 301.025 304.857 301.025 304.882 301.025 cv
304.882 301.025 304.882 301.025 304.882 301.025 cv
304.772 301.025 mo
304.759 301.025 304.751 301.025 304.737 301.025 cv
304.748 301.025 304.762 301.025 304.772 301.025 cv
304.688 301.025 mo
304.682 301.025 li
304.686 301.025 304.685 301.025 304.688 301.025 cv
243.258 290.758 mo
242.615 290.506 241.974 290.248 241.335 289.984 cv
235.32 287.48 229.492 284.447 223.999 280.785 cv
222.047 279.484 220.14 278.105 218.28 276.64 cv
198.42 261.006 184.174 235.825 183.782 195.733 cv
188.147 213.509 195.189 229.993 205.706 243.72 cv
202.396 251.777 203.219 261.024 211.48 270.67 cv
220.753 279.718 231.694 286.185 243.258 290.758 cv
400.606 248.218 mo
400.463 247.976 400.273 247.908 400.064 247.908 cv
399.93 247.908 399.787 247.936 399.644 247.964 cv
399.5 247.992 399.355 248.019 399.215 248.019 cv
398.908 248.019 398.627 247.885 398.444 247.323 cv
398.314 244.113 397.74 241.18 396.802 238.507 cv
404.654 227.247 409.075 215.449 411.215 205.285 cv
410.585 220.377 407.551 233.354 402.72 244.445 cv
402.043 245.727 401.34 246.981 400.606 248.218 cv
.92549 .580392 .235294 rgb
f
304.882 301.025 mo
304.882 301.025 li
304.857 301.025 304.834 301.025 304.81 301.025 cv
304.799 301.025 304.783 301.025 304.772 301.025 cv
304.762 301.025 304.748 301.025 304.737 301.025 cv
304.721 301.025 304.705 301.025 304.688 301.025 cv
304.685 301.025 304.686 301.025 304.682 301.025 cv
286.992 301.01 264.245 298.987 243.258 290.758 cv
231.694 286.185 220.753 279.718 211.48 270.67 cv
203.219 261.024 202.396 251.777 205.706 243.72 cv
223.68 267.179 251.783 282.577 293.975 282.577 cv
302.096 282.577 310.75 282.005 319.942 280.811 cv
359.631 275.656 383.294 257.876 396.802 238.507 cv
397.74 241.18 398.314 244.113 398.444 247.323 cv
398.627 247.885 398.908 248.019 399.215 248.019 cv
399.355 248.019 399.5 247.992 399.644 247.964 cv
399.787 247.936 399.93 247.908 400.064 247.908 cv
400.273 247.908 400.463 247.976 400.606 248.218 cv
379.497 283.786 335.397 301.025 304.882 301.025 cv
304.882 301.025 li
.945098 .745098 .654902 rgb
f
212.122 128.756 mo
214.698 114.878 221.392 106.129 224.483 103.715 cv
224.483 103.715 232.725 107.939 238.907 117.593 cv
238.907 117.593 226.546 128.756 212.122 128.756 cv
cp
.866667 .47451 .211765 rgb
f
224.957 108.034 mo
222.553 110.78 218.803 116.435 216.498 124.958 cv
224.194 123.684 230.878 119.42 234.26 116.92 cv
230.882 112.464 227.186 109.553 224.957 108.034 cv
cp
212.122 132.184 mo
211.104 132.184 210.138 131.731 209.486 130.948 cv
208.835 130.164 208.566 129.132 208.752 128.131 cv
211.582 112.885 218.899 103.726 222.373 101.014 cv
223.426 100.191 224.857 100.054 226.046 100.665 cv
226.416 100.854 235.189 105.429 241.794 115.745 cv
242.697 117.156 242.447 119.014 241.204 120.138 cv
240.659 120.63 227.686 132.184 212.122 132.184 cv
cp
.407843 .0431373 .0431373 rgb
f
356.132 113.636 mo
360.87 108.194 369.15 103.284 373.272 102.781 cv
373.272 102.781 381.271 111.692 381.271 126.777 cv
381.271 126.777 365.274 123.349 356.132 113.636 cv
cp
.866667 .47451 .211765 rgb
f
361.027 113.546 mo
366.344 118.018 373.177 120.754 377.57 122.18 cv
376.648 114.515 373.62 109.151 371.915 106.655 cv
369.031 107.702 364.588 110.312 361.027 113.546 cv
cp
381.271 130.205 mo
381.032 130.205 380.791 130.18 380.553 130.128 cv
379.857 129.98 363.397 126.357 353.637 115.986 cv
352.429 114.704 352.391 112.714 353.546 111.386 cv
358.553 105.633 367.576 100.023 372.857 99.3783 cv
373.977 99.241 375.076 99.6587 375.823 100.491 cv
376.186 100.895 384.699 110.565 384.699 126.777 cv
384.699 127.812 384.232 128.792 383.427 129.442 cv
382.811 129.94 382.048 130.205 381.271 130.205 cv
cp
.407843 .0431373 .0431373 rgb
f
197.893 237.826 mo
192.812 238.537 187.745 239.39 182.72 240.422 cv
180.029 240.975 177.389 241.696 174.715 242.316 cv
173.006 242.712 170.86 243.089 169.232 242.174 cv
167.274 241.074 166.74 238.365 168.165 236.616 cv
169.384 235.12 171.608 234.395 173.404 233.971 cv
179.118 232.622 185.138 232.314 190.989 232.311 cv
193.244 232.31 196.294 232.021 198.44 232.836 cv
200.909 233.772 200.496 237.428 197.893 237.826 cv
cp
f
203.029 251.74 mo
197.573 253.648 192.301 256.07 187.063 258.501 cv
184.137 259.859 181.307 261.383 178.428 262.832 cv
176.816 263.644 175.2 264.401 173.398 264.651 cv
170.624 265.035 168.37 262.201 169.941 259.645 cv
171.257 257.504 173.931 256.08 176.116 255.038 cv
181.877 252.293 187.959 250.099 194.076 248.298 cv
196.553 247.569 199.53 246.447 202.148 246.49 cv
205.115 246.539 205.814 250.727 203.029 251.74 cv
cp
f
209.719 264.012 mo
205.755 266.432 202.046 269.205 198.338 271.995 cv
196.161 273.633 194.061 275.361 191.96 277.096 cv
191.098 277.808 190.232 278.514 189.353 279.204 cv
188.955 279.516 187.553 280.226 187.414 280.636 cv
187.377 280.451 li
185.414 284.658 179.331 281.397 181.307 277.243 cv
183.25 273.158 187.739 270.354 191.326 267.884 cv
195.624 264.923 200.082 262.132 204.847 259.979 cv
206.397 259.279 208.316 258.18 209.918 259.344 cv
211.507 260.5 211.408 262.994 209.719 264.012 cv
cp
f
396.881 230.928 mo
401.98 229.947 407.383 230.89 412.336 232.232 cv
415.198 233.007 418.03 233.974 420.756 235.14 cv
422.623 235.939 424.878 237.057 425.974 238.862 cv
427.219 240.912 426.008 243.651 423.666 244.129 cv
421.819 244.505 419.839 243.528 418.228 242.773 cv
413.143 240.389 407.759 238.492 402.217 237.511 cv
400.789 237.258 399.392 237.126 397.945 237.156 cv
397.04 237.174 396.229 237.052 395.499 236.466 cv
393.454 234.824 394.306 231.421 396.881 230.928 cv
cp
f
392.827 246.347 mo
398.543 247.527 404.171 249.466 409.538 251.744 cv
412.575 253.033 415.589 254.418 418.469 256.031 cv
420.429 257.129 423.134 258.708 423.904 261.002 cv
424.809 263.698 422.295 266.007 419.676 265.441 cv
417.827 265.042 416.24 263.846 414.671 262.86 cv
409.292 259.481 403.403 256.838 397.565 254.364 cv
395.417 253.454 392.929 252.863 390.889 251.745 cv
388.054 250.191 389.61 245.679 392.827 246.347 cv
cp
f
384.121 260.862 mo
384.121 260.862 384.582 260.993 385.39 261.222 cv
385.803 261.343 386.435 261.607 387.089 261.86 cv
387.804 262.128 388.348 262.426 389.086 262.757 cv
391.884 264.088 395.266 266.16 398.531 268.375 cv
401.784 270.614 404.912 272.986 407.23 274.939 cv
408.387 275.958 409.291 276.826 409.977 277.683 cv
410.153 277.889 410.292 278.087 410.42 278.252 cv
410.566 278.449 410.768 278.771 410.88 278.959 cv
411.123 279.381 411.228 279.611 411.228 279.611 cv
412.057 281.313 411.35 283.365 409.648 284.194 cv
407.946 285.024 405.894 284.316 405.065 282.614 cv
405.022 282.699 li
404.998 282.734 li
404.908 282.658 404.795 282.579 404.689 282.473 cv
404.509 282.281 404.122 281.982 403.752 281.635 cv
403.392 281.278 402.893 280.87 402.411 280.417 cv
400.406 278.57 397.515 276.169 394.54 273.926 cv
391.588 271.646 388.505 269.553 386.204 268.21 cv
385.652 267.907 385.056 267.531 384.684 267.366 cv
384.26 267.167 383.976 266.977 383.594 266.828 cv
382.807 266.535 382.357 266.367 382.357 266.367 cv
382.322 266.354 li
380.825 265.796 380.064 264.13 380.622 262.634 cv
381.151 261.215 382.688 260.46 384.121 260.862 cv
cp
f
227.499 201.705 mo
230.114 205.134 232.992 207.729 237.092 209.291 cv
241.688 211.041 246.924 211.438 251.758 210.582 cv
254.119 210.164 256.48 209.427 258.597 208.29 cv
260.614 207.208 262.241 205.756 263.975 204.29 cv
266.307 202.318 269.62 200.378 272.214 203.227 cv
275.195 206.501 271.752 211.085 269.274 213.446 cv
265.756 216.796 261.224 219.11 256.561 220.376 cv
247.155 222.931 236.381 221.501 228.135 216.233 cv
224.439 213.872 220.452 210.248 219.482 205.774 cv
218.486 201.179 224.354 197.96 227.499 201.705 cv
cp
f
331.188 202.382 mo
334.388 205.138 337.384 207.9 341.403 209.459 cv
345.099 210.892 348.856 211.473 352.792 211.256 cv
357.347 211.004 361.978 209.139 365.446 206.174 cv
367.828 204.138 370.748 200.184 374.379 201.11 cv
376.597 201.676 378.097 203.866 377.81 206.144 cv
377.594 207.85 376.313 209.302 375.286 210.594 cv
372.146 214.544 367.235 217.832 362.509 219.545 cv
354.18 222.565 345.54 222.269 337.35 218.894 cv
332.384 216.847 327.122 213.364 324.606 208.472 cv
323.686 206.686 323.444 204.724 324.764 203.034 cv
326.315 201.048 329.266 200.783 331.188 202.382 cv
cp
f
301.535 236.402 mo
302.286 247.709 295.921 260.123 283.522 260.757 cv
278.703 261.003 273.719 259.517 270.106 256.266 cv
268.301 254.643 266.531 252.291 265.987 249.871 cv
265.422 247.354 267.903 245.088 270.359 246.025 cv
271.501 246.46 271.929 247.407 272.55 248.299 cv
273.405 249.527 274.551 250.625 275.799 251.447 cv
278.067 252.94 280.564 253.315 283.216 253.407 cv
282.7 253.401 284.026 253.313 284.087 253.307 cv
285.819 253.118 287.413 252.522 288.822 251.485 cv
291.669 249.388 293.229 245.864 294.071 242.524 cv
294.439 241.066 294.694 239.543 294.719 238.036 cv
294.738 236.881 294.567 235.796 295.239 234.763 cv
296.995 232.06 301.318 233.195 301.535 236.402 cv
cp
f
302.018 240.425 mo
302.337 244.029 303.66 247.926 306.28 250.433 cv
308.661 252.712 312.074 253.624 315.266 253.426 cv
318.173 253.246 321.1 251.927 323.151 249.776 cv
324.661 248.193 326.039 245.52 328.628 246.806 cv
332.128 248.544 329.487 253.349 327.764 255.379 cv
325.209 258.389 321.543 260.167 317.761 260.819 cv
309.876 262.178 301.788 258.579 297.972 251.22 cv
296.372 248.134 294.955 243.7 295.396 240.124 cv
295.908 235.964 301.788 236.27 302.018 240.425 cv
cp
f
298.982 221.505 mo
285.209 221.565 280.695 224.858 281.54 229.379 cv
282.412 234.042 291.172 240.219 298.523 239.697 cv
305.46 239.205 314.84 235.136 315.505 228.396 cv
316.082 222.545 307.459 221.468 298.982 221.505 cv
cp
f
250.807 164.451 mo
236.44 164.851 231.786 171.496 232.779 176.192 cv
233.802 181.035 238.833 186.302 250.725 185.522 cv
257.966 185.047 267.02 181.304 268.188 174.333 cv
269.411 167.041 259.65 164.204 250.807 164.451 cv
cp
1 1 1 rgb
f
343.581 164.451 mo
357.948 164.851 362.602 171.496 361.609 176.192 cv
360.585 181.035 355.555 186.302 343.663 185.522 cv
336.421 185.047 327.368 181.304 326.199 174.333 cv
324.977 167.041 334.737 164.204 343.581 164.451 cv
cp
f
222.008 89.5699 mo
220.561 89.5699 219.072 90.1381 217.839 91.2111 cv
207.238 100.44 186.684 141.836 187.21 195.699 cv
187.526 228.087 196.69 253.166 214.447 270.239 cv
239.49 294.317 277.39 298.413 304.781 297.599 cv
320.281 297.141 349.846 293.674 373.714 275.595 cv
396.334 258.464 407.839 232.912 407.91 199.647 cv
408.467 142.684 386.216 98.9992 377.269 91.2102 cv
375.488 89.6611 373.175 89.1656 371.228 89.9114 cv
356.984 95.3721 342.36 112.683 342.214 112.857 cv
341.241 114.017 339.621 114.401 338.231 113.803 cv
314.041 103.385 277.127 105.709 256.796 113.837 cv
255.42 114.388 253.847 113.991 252.897 112.857 cv
252.75 112.683 238.096 95.3612 223.882 89.9114 cv
223.283 89.6812 222.65 89.5699 222.008 89.5699 cv
cp
298.553 304.547 mo
270.557 304.549 234.509 299.039 209.695 275.182 cv
190.561 256.784 180.689 230.065 180.354 195.766 cv
179.8 139.002 201.563 96.2919 213.338 86.0399 cv
217.035 82.822 222.015 81.8536 226.335 83.5091 cv
239.431 88.5296 252.118 101.701 256.531 106.603 cv
278.226 98.7431 313.464 96.7412 338.623 106.555 cv
343.076 101.614 355.724 88.5129 368.775 83.5091 cv
373.098 81.8536 378.076 82.822 381.772 86.0399 cv
393.908 96.6057 415.313 143.62 414.765 199.688 cv
414.605 274.536 357.95 302.887 304.984 304.452 cv
302.897 304.514 300.748 304.547 298.553 304.547 cv
cp
.407843 .0431373 .0431373 rgb
f
270.292 390.69 mo
269.251 390.69 268.365 390.146 267.796 389.157 cv
265.486 385.145 267.121 380.489 269.767 377.655 cv
275.599 371.409 284.555 370.098 291.041 370.098 cv
292.528 370.098 294.049 370.169 295.561 370.309 cv
300.99 370.812 306.315 371.944 312.215 373.262 cv
316.492 374.217 320.113 374.854 323.888 374.854 cv
325.457 374.854 326.94 374.743 328.425 374.514 cv
338.915 372.9 347.95 365.526 351.44 355.727 cv
353.107 351.05 353.748 345.498 353.398 338.753 cv
353.365 338.113 353.267 337.436 353.161 336.719 cv
352.966 335.382 352.764 334 353.012 332.889 cv
353.258 331.783 354.232 331.288 355.088 331.288 cv
355.788 331.288 356.668 331.632 357.037 332.599 cv
363.056 348.225 357.095 366.741 343.171 375.67 cv
337.266 379.458 330.345 381.459 323.156 381.459 cv
321.088 381.459 319.003 381.29 316.96 380.955 cv
313.934 380.459 310.884 379.765 307.935 379.094 cv
302.251 377.802 296.375 376.466 290.358 376.466 cv
290.131 376.466 289.904 376.468 289.676 376.472 cv
286.488 376.526 283.476 377.047 280.964 377.98 cv
278.709 378.817 276.373 379.82 274.565 381.48 cv
273.412 382.541 271.944 384.791 272.916 386.317 cv
273.664 387.508 273.426 388.474 273.094 389.074 cv
272.56 390.041 271.434 390.69 270.292 390.69 cv
cp
f
267.672 409.81 mo
267.144 409.81 266.624 409.666 266.168 409.392 cv
266.148 409.379 li
265.951 409.254 265.57 408.995 265.244 408.656 cv
264.807 408.21 264.389 407.628 264.035 406.971 cv
263.208 405.412 262.696 403.6 262.515 401.59 cv
262.375 400.067 262.375 397.051 263.939 393.955 cv
264.266 393.296 264.658 392.657 265.106 392.05 cv
265.32 391.754 265.566 391.443 265.857 391.117 cv
266.075 390.864 266.198 390.739 266.323 390.613 cv
266.541 390.387 li
267.176 389.806 267.622 389.403 268.229 388.929 cv
268.401 388.814 268.597 388.672 268.792 388.53 cv
269.197 388.237 269.58 387.96 269.988 387.743 cv
271.231 386.996 272.513 386.393 273.821 385.939 cv
275.222 385.424 276.623 385.116 277.687 384.903 cv
279.346 384.608 281.02 384.458 282.652 384.458 cv
283.299 384.458 283.938 384.482 284.554 384.529 cv
286.66 384.66 288.231 385.033 289.365 385.343 cv
289.882 385.482 290.201 385.597 290.447 385.686 cv
291.007 385.895 li
292.29 386.38 292.939 387.822 292.454 389.107 cv
292.089 390.069 291.151 390.716 290.118 390.716 cv
290.001 390.716 289.884 390.708 289.767 390.691 cv
289.096 390.59 li
288.817 390.543 288.469 390.485 288.153 390.468 cv
287.417 390.369 285.986 390.245 284.294 390.203 cv
283.906 390.2 li
283.197 390.2 282.444 390.23 281.66 390.273 cv
280.77 390.33 279.826 390.451 278.77 390.643 cv
277.81 390.855 276.804 391.1 275.831 391.48 cv
274.904 391.813 273.983 392.262 273.106 392.81 cv
272.835 392.949 272.58 393.143 272.333 393.331 cv
272.196 393.436 272.06 393.541 271.915 393.635 cv
270.872 394.527 li
270.63 394.773 li
270.424 394.983 270.325 395.087 270.265 395.173 cv
270.17 395.284 270.057 395.424 269.933 395.597 cv
269.687 395.929 269.468 396.287 269.288 396.652 cv
268.479 398.214 268.392 399.941 268.463 401.113 cv
268.527 402.147 268.768 403.071 269.013 403.71 cv
268.864 404.05 li
269.136 404.343 li
269.331 404.466 li
269.356 404.429 li
269.417 404.526 li
269.485 404.58 li
270.65 405.492 270.947 407.134 270.178 408.401 cv
269.643 409.284 268.706 409.81 267.672 409.81 cv
cp
f
266.677 419.339 mo
266.435 419.339 266.193 419.309 265.956 419.248 cv
264.657 418.914 263.748 417.699 263.793 416.359 cv
263.847 414.794 li
263.849 414.282 263.937 413.714 264.11 413.092 cv
264.275 412.366 264.463 411.615 264.85 410.846 cv
264.916 410.71 264.975 410.577 265.035 410.442 cv
265.161 410.159 265.291 409.865 265.455 409.61 cv
265.718 409.211 266.011 408.802 266.313 408.383 cv
266.518 408.071 266.768 407.819 267.031 407.551 cv
267.572 407.002 li
267.848 406.722 268.132 406.433 268.429 406.234 cv
269.765 405.258 li
271.115 404.502 li
271.915 404.073 272.842 403.685 273.94 403.322 cv
274.918 402.996 275.881 402.74 276.802 402.558 cv
277.506 402.404 278.198 402.32 278.867 402.238 cv
279.591 402.146 li
280.407 402.076 281.502 401.992 282.519 401.992 cv
283.225 401.992 283.832 402.031 284.375 402.111 cv
285.089 402.176 285.741 402.327 286.298 402.462 cv
286.856 402.618 287.341 402.753 287.63 402.903 cv
288.333 403.21 288.717 403.455 288.721 403.458 cv
289.25 403.802 289.614 404.333 289.745 404.952 cv
289.876 405.571 289.758 406.204 289.413 406.734 cv
289.136 407.159 288.739 407.478 288.263 407.658 cv
288.26 407.659 287.833 407.817 287.113 407.96 cv
286.579 408.071 li
285.924 408.21 285.246 408.353 284.309 408.464 cv
283.99 408.509 283.671 408.539 283.342 408.569 cv
283.048 408.596 282.747 408.625 282.438 408.663 cv
282.04 408.673 281.591 408.73 281.132 408.789 cv
280.891 408.819 280.647 408.85 280.4 408.876 cv
280.143 408.922 279.925 408.959 279.705 408.996 cv
279.213 409.078 278.704 409.163 278.208 409.3 cv
277.558 409.428 276.845 409.622 276.125 409.867 cv
275.527 410.066 274.905 410.32 274.228 410.64 cv
273.393 411.065 li
272.648 411.575 li
272.464 411.674 272.307 411.819 272.168 411.947 cv
272.019 412.08 li
271.838 412.231 li
271.686 412.352 271.512 412.49 271.393 412.695 cv
271.247 412.857 li
271.033 413.106 270.813 413.363 270.659 413.66 cv
270.409 413.988 270.278 414.344 270.171 414.633 cv
269.946 415.18 li
269.936 415.239 li
269.91 415.402 269.894 415.511 269.868 415.608 cv
269.465 417.175 li
269.138 418.45 267.991 419.339 266.677 419.339 cv
cp
f
270.171 381.574 mo
269.81 381.574 269.413 381.544 268.991 381.488 cv
262.326 380.582 256.849 379.174 251.756 377.06 cv
243.973 373.828 237.33 367.747 233.049 359.935 cv
229.952 354.282 228.314 347.386 228.557 341.015 cv
228.689 337.533 229.331 334.679 230.464 332.534 cv
230.904 331.7 231.724 331.202 232.656 331.202 cv
233.34 331.202 233.976 331.468 234.401 331.933 cv
234.813 332.385 234.998 332.998 234.934 333.703 cv
233.834 344.877 236.432 354.725 242.446 362.179 cv
245.338 365.764 249.539 368.99 253.97 371.03 cv
259.274 373.47 264.632 374.568 270.305 375.73 cv
270.62 375.795 li
271.689 376.014 272.576 376.58 273.054 377.346 cv
273.446 377.976 273.542 378.694 273.338 379.479 cv
272.966 380.909 271.96 381.574 270.171 381.574 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 19.2.1%%For: (Irina Mir) ()%%Title: (cat_meditation.eps)%%CreationDate: 10/6/19 13:38%%Canvassize: 16383%AI9_DataStream%Gb"-6Gsg>tdQ%/R!PUq4cpHE%CU8T#KS308-ktmZ:m2_eajr$1l1;saZbIDM,<H:O4f9k<2n/OOPE+bP8/dJ"Q"O_g)r5hN;Es&T%r3MhpE`m"2"Y@Q=T&DK3Zd1+V;7j"<?1rte7[F5>5[1\`HLeho%Lj8=Drhq7DCql4%U+iie8FFfeOHUQR`YL:l^>HU>WrHMn"OR)%nKYAC%83$DZe6@B;Q*Qi6DINg3uPd!!0!GH='rAs47[Oh%:F1];j3<<W7-l.8]7q)m,@YMZ9&@tVN1-pOZsgX>U&/LF,,f^LM!t:%]5D4ZrbGiS^E=Wq>lG8f;*gU#s6I4ui!e=dSdXpKG_&_>+e[$cI/-.f&'ekHGj5a<h?Y+bJd_I5n733rbkDAFl?kPKNiug[jXZpm%bK\)!'A-B6LBJ[jJj0NrTrD+\UO!7-.tM?i:k.Uk*(K+VG,H'u.ZO9PGa.%CH:EsiAuO[/&m$llr%f]BB(F>PfWB>h<+k2knn2T!%UQFq'!ROk#ES6>Pr]'&$rgW4X!<-,AiW!o(_-c]dbE*-4h&IEqTaOX\k>$aeq:%4fh(/!@!Kk/Va&/sA%6K\]=\ge$Q]o#A"`0S.%b76e]>ET(GPC&b=3HGUi$_hn$-]6#go9ddtn!3+WC?AY5QD9c.k%q)><;Ac#[bLo[*=Y0u<hn6HHDMi6ci[+;(M'^HNiI-8p>&%m%<1KKrY55VFE#c=3UQ4,uNG98q@l<:V%kkN%@e_`o`?";(U\\uj[A$K8E/1Bs0gV/:UNQga\:NgU!`!asQ=u$JM$5cH!>FD-%YTpZ%FWe0QI]IKqWNRpo3Fr6CHZZl".E>XlGSslg9+>Ca:](ma5FPn=oM-d6S(VboPMBJRX#nLO8$^aKH9'TU_<eYmh_ldYfB)_02U:tO%qcc4GYBQI^#jUk+0,h-=V%,It?Do7Na[*<b+)SJ*h<%K2X>)Mt/N6G"bj24WBscqnQ8AE9?fbYW1NQ1dA<'l&8Ks7G[r%GK8osu8%FE2?&.&.m,2q;:*^SB\PqbmjCpiR&%Wdg)0NFi6oDDrKk5rGa!Xc.j9FN)CHq';3R'-i0b;<Md'N05oaE]OmEeYE`Q2%:1Z7X%h5%e-?O5=P2p:BXBC/LHF%$=%U4tCH63k^j:)?F\3JKGRa;[@K'CkD,`%QRXI=*3KUa$V.t,EZe^I9/DO)/p.-^?g$6"!1<5AD2+H?l%aKD0:.k%bHO$4''$haJ0r,FHm-e"a'-Rg534(I!2I:lYHo&6D:OUJ5?b'>LR?;sP7\f((op6U1#CWdtn</p2)[d?Qa2+A$!9#FO[%HY0<`OW3s#Tlb.@UE?2brl*%Eot@aph+i&k3-_h?mkhqFPkL@lb`t<MWthTO*0j]mdq`M6%0!>+QYeNKh+B&P-b</jJf:4@\d4df%Or2jBa<G.Bo&r^fDG*Wt:-J8<XcAg%RCQDlH<?BO*M8sD10OG!gE/4Wq'T4ThYrahfp+e99$iV-c0T"*Hu^uRBR;_F6ljmG8qm(:%D.\V-Y#ojqW@o/lYn%&=/b&f\^H2k$hlSD<p1L20*=2(a$H!&=oFKq;WSPX^M6o]:X,m\'`rI<KGK(@cC#Ens6NdG6hQl=#QrYQY%!tD))7FFHIOW(n9]$%fX&VqZNV$S:3VOTppm>SifV&ho*J]+Ch&m(5Sd!KZm9YDJu$Q^_+<'$H9)6tO?@pCr'HpRBUHIAh`"0Pj,%LE#_*P+otaH-=?R0G!5('m<ANarOQ9I81O%&h'k!Tn*\^?:K/&'?=MSr4pj8Q='_C[AJSu[u`^!$.2`L6;Rc-,o$[q\<#GPNuQ;r%b!?K5f1_AUgGjbPI-tqnLa7ih"87.!&0e)]G"%cP5f_=f9*>9hAfq`1o_9]!',TCY++[D^P6":ncN*&^j86"?)MH6F)dqS-#itc0%h[&58ocgQ,Q1LjJMTp-KnS!btVX,eDHD/Ck<0AR:>kjn'k><juVnn<gcR^&u7PF03+ria-FP66ee!:PS@'1bL_`X7gL'e:3@4&jo%0pT-+PVLc'RA"`a/AY#cNS-l56%UBq?r7)N"!7i8?r"s!F1m)Bgskl!X^dZ<!,oLi!JhpgM3KuI</7(6qmb#[iq@b/pmk8#i!9K@%45+h*cVBVcGXhZDcVBTq4<K>e)5rV#QssL9F*nbl%IR%'-(BPA5Y=T!F=5\V!9K4pUbP,BH,t1<'bk2?iGINlQ3a/N:^V5DrjVuH%E]Hq4b+F3(KnM'?JIkjW#jPo8k/ZK!B:b5dZE\0jL$.aoPLQ'>)X%XPi/%n7jb+O-\AWr+-9$6?"6Bg42#FH/d1XN+_cQD[0JgZ>%l(HcD/+8k\2V`8]+9YQOK)9.M&g9"t$&^8#lOYMB0#LUUSe.bdffBDo">^u>722m1]W26GpDLlZG60*B'*X,*?tBpP[cbLn3UI@c%mDFKQ8*Ff_jT)Mgc%$+sAuZk%FMtJL1hKXR+>LA:#9ro/.E2!Y=M"dJ%nEiimW,><`Wpca[)N\sNuB/6I?IDoEX%(K#<NoW%,1t3%0N:$Qrdik#-p<FQ\/'Yn#:]-k2[G)[?'LRoC539"=!^C":eXeD?ildO@9aB].Qe=\TUaTk3msZQnf8;DLETG0A4C!>Ck.,->uR_s%+aXBEfJRg0aR'_N&fBhB*Ae;%>(DWdh$JqlO9Q&[5QlWOf]@>5=T4aP-1Q$7,*7r2:r6\!,mGGk0H,#k'cdnl-+d(Q1f/'=']Qt=%&1FBP!HO;Oc!]!C^nqT"-(YAHOS7':$NZLe5[!#J+V4e3NnVP,F<"6seYo[=$>`?E'oHWT<ht=MU")X6P/cRSi<D(HY%F=h^uIAH%_FGJV`_<aCX]l,;70V^8[/s@nnOD#T6L2nC2F-Z\iTAAL-_P#5b]b(\KC$!tP9=F7Z#Zu)7.-AC>p!^28a0es*[<)4V7pesPVCl`%"5O^P[?J1cl&Z.QV.613Bh\[s#7moI5Cb#FGs]Yb,K>Su<osPik]qiV!$KA=G-(jpp1kc]XAD/.:7`YA1J*Oc@p"Ef4pjUD,II[(%2O&EU+id7+hD9#:h4dLD+%h!p7>&B2/E=[/bHWSWEYP=08,DtH";74Yf6;nE9EJ$*6D5nBPO!KXb7#]4:e!]t>&B.<Z^q/?E.`C)%-'uECp#l2XoK=u7abmeZ9n<OR$D]uQY^ls5(JfMWEZ\.5IrL-_MLs!(o1/s"'iPn+7$7Om$?c+\TH+j=&n`E]-n6.*gEgGk]-J60%,/PKUp4\9oY`anK#j\6M4qIgs0I_th&&c9RbpasJNGl>^GB"%Oj5D./N6V[:VR;a93'aT!0O%j-jhr.hdT4?YY`F=)ST9!\+C[$b%/aHRd=rrG#fi/O#$P!o;G<$BD,k7*j2%><FVD\LX(*:CUU6gIoUq,%lE31bR&]&Eb"RLGHOQ%6U%,Z)hlf-:<T5r2bA/5U)50aVV%^$\^?mEjo(#[G&o(rutl\#""Z9W>#&g.3N_>A:uT)I6=s&JF:1*k$_8?10?6.Cl<-9SeE,>i7Uf4>LAM>7nZ0aQ`eHWU^n!1gfar%F</[O@)h%Kec_3Opf'$_OkKs_FW!&98PP6!pGq?T6PB_Wh#Jl;`dPc3708.i_[,VsGQ]Q?LqkkRjDOUG1#-$6h'L"L\.m<QIOq#c%et@h,_9L3`Xs.fnGX;K7a3IB9g>\iZRgE4cq%@EH9Kgu5%0?l`&R,La*_W@t\\@!U1L-f$+AqZ9USc09.Yu^)n2Y;Cf>G",G_EWG%\%k9Q/c5:DGk@@>PLVaNU(q["0PdBrAjr4H2b\S7[5B+iGTQ-'<oFCe-3mdBA"B5hhrn)DI:[toe"/;TjC\$\kBF&6`._h/i``H-%M!Y;j5s<FQ^qb:7fWf^N9S"jucQtg["a;7`&V4&>.k$XW8oB]0M);I-K"5Rg>UAJ`Z&Xlt7<9,M!=jVb[UB`c;of'!2YL?#_62g;%Mo(niN]RY?=cA\o<Y/HO34%U)E!!XX_WiM"L_8;"ehu:qkUUA5i*^Clgh2Ih6*+*%$5-R]K/7>*3SephUah'K6TmN;grJ7/#2TUm%%#g(2r7I8^k_T%mgH(pAgG1Np<<a95C=2"n&Wd!(YTlu7.,H#VB+o_6UK:9kgp#E>^dB,IUt-=bbG8Pf-PiX>!`]r-e_urQ6T.Zk%=['u?$LYEtrPsR'1R%A`,W)`Y&Tbg>^QKdQ[+&fk8:apaQiU*s8""K:!J5P1*m4D6D)luW;V[a==K[i'+@Drbcg9#+4:HYZgp1ug%XLA`V`EIRWEs63Q&MlOX=aDni#@QnPPl$JE]\I1Q&7=o=JWsj1lr;tikgUsP0KdfM;+<E:mToHqK#a[#^r1nqbQ2UtJM=20BMSnW%(briGN'`(JAh@r@\^dm0Le&@B5$EFGF8Z+A#8@4llmWt`-Y6<oLEeO/)H!![qVX)W"(6_c"9E4_70=m$RtFf]5b8/R+YhW'>[4FC%3-[R4B.q*V?l*i1I,inB@)eQ74+TTe!9gouA6NC\`+p\m0^Hpt>$%mNfXM`oSPOZO3b29Bi7d^<J0#>YiO2%bVF(P?4mUs5k\uYl%@0;dX-e5LY2drG*H3XJ0>;mTJk!3I[b"TakO.."bB^M5O"Gi@`CJKHK1R'LZ0UFgB'h2e+?,?<=!,R#k<;TiVO9I$AV*sDN'W@Dr%kdghonH=C98?jU$HCK9jUX27=`$3dAmo/0_Z5BuDd;KIn]83h4!:e,a,V"(o+L?'""!^]KK![!GY[c/r.2IkqO=10;45dW6hh-/J%LVD9t"EFjW&Le%K`WIQpJmL9A_EA9-A!&HW*.C3Z5DPsjrD<e$e>NgY=,-oWJrt($cjGI0EX*VRNi2j7'V`K'*9<ba!XJk.*Lft-%3j[*Ae/noEM"_noNk@b&8+;2r9T=cZ\@%Hq#po`/dB9<IR:&%nCL*sq-kHA(W7Dj*Ef^9k1cH"WF<"mNW!!cO%9KQR&c`5!!?L,C%cjLhoY+Y;._<A]/XI,YU_D@lPJ_/1n@!#%tB5&.q?o@eTOrukCF9lVte8ZUm&K!5NobOs%2445@N^?-,",4W$cj,?""raTY4SChO%W51r"$138i0TJl8g,Frj6Q,5>M@M=+[/$nLTYTKg0UO05[7?P<WIY(2E[r!"UH$MKX\kcDFcF2JS@K!*%AU]uU'[%'SistFJ1%$C%_t]?$;4=?d!^>IL0B\(a`5@jlMns'n*!4/<"<5)qL^N/p!3qD&G%(;)!&V_SBFi[N+i,/)9n`$W'.#Ss`Q3`C1C[5iAq>QSSf?(Y%k-p(QiK=<\JZ,VQVMp/S#+.a\`$-nL-Nsp_XY9fgJ:a:sTNI>#?0ape#qOV(-=NK]73?hsQjs"`82r5bB:W4dQ5Y;&RV+A#^@#LB%>am,cbs'J%jd=R$(T6@7`t9^*cpEkm$V.$Y$=(o[AjB4,pi=Yr>LX%.U@T0*.>UQ*2DIZn(2?F9YrEp1VhYOOo*?1UYFdVMZ86<4%-O;L\!3=;Hh\a3gon[OT;Ob<C"Za<S2Zgmq!OL`o,N<JC9M?'&"SK1e"$frB6d1Q,J=_fef2s7oEF=/K`Y('mj$i!s3JS5tWh2+s%bR#`k=W8#O@##n-1E$6&ZV)Fk2D5&5J-[:%P=#I"1':q)+u$!">Sg+JR*"ar(rhXBkq_7S8Wd[KHrAc8JPhFF(kLD6JRD`5\C"Oa%"e5bJG8U+D=63]QB\:]"J<!-*FfksIPOe6#!R7cZ^hA$$ft]JrMZe)sZ]T9flOtAQBs'Ild/OT#NH,>.MRh\o!DpMJR7W)X>V"h7%F9EYT%VA@*0K0?)d/N[3!=K,C5>Ps1!MJVD[Y.eVml8=5+;EXL''u#s4c!uiSQc/p$1.2L0Q-hS?mAMn3KtE"33KWLl4l>`UohOV%TRW?FA@*],n/VB+BG\YC.Wg9*K_^X/jWGo8=fmTD#fL!Z`f`(F,R$r[g:G-,F$/?c]+/`dC@`;(/3#\^"gp*4qhd&IA"_D(OI.`t%^'U-FSR,a]pTZ"Zkh-MehAk.pNhQPI6SH4qTI#Q^$s,q>aOh@dGXXl,]YoJf-.gQF&J1/U^ib5U!2[\2*Q-#L2PUk7qZQ^)ppOk/%kl:BCmpQEQa,n=V%g,WX5/K+FJbT;oH;_T,WjY;\30GC4=sC+'#QUo`$VC93dcJ'3Mlbi7e!W8p1_?\U1_BV`*7AVM9*#6m"_97l%doHh1!#8Jb2*_R2$118L"No)beo&o7j!FuH*3E*@d*.*gN]7JYS/H'ib6b=G"U';T^5d1]812etMO)P.<ss,W$HM;t$)fHjk$;`m%63UoRC*4cq3tsd80`q!@5a&J1F?GZ^a#.[lC4l`$Z"RaZ&%F9p#hNlGF]R_7.`9UaPqcqSX%(/J+\lDW#iA5fcS>>%@,ma>HN+kU%ahct;bl](WlT'ta8MCn3QCEO-B^6gS?p'XnWF9&PA.aCR87p-`VE':HQG<gIKJ+tTol5>)i(_Z+,`QCK.G)rRc><b;&>f1CJ.;V_%)fao"+c(_CnYcY<!Y93=[=ZC985Z-tp]Q#K=1]TB8]al.4#JE?Fc)lVBUHt1K8!=ARILK4[j&WO*_K2sCD`TFdTVdj_%gJ4$e!;1%ET_<QLlV".#/WeC;FAA.UPX;%l,t6iTS!Y[L3-kX(<%O7^a[X.9]1$/pSC/mI6k#MMY7q<d9)%M(`RLu\D[(/C?(Lqlo(Rb`XB@<%a,(i)bJM.!ctXH#k1)9R_?1UpmosM/'LkLK]2gp$4@C<JA$?/DJ0X!lW0%Jjc=o\^NK4qg?sgde@nJ@3c62t^iTu_D>f-4qB=PRT%2i\cL#p+D?T,Iq7.*"UbYFnb_c(;D'&YNa8d`+/3,h-E,+^GQND#B_homg@=n1]-"C)jH0!9i.c$_3!hLdVP=mhj\pVBp5%`L/_3%!9g+kU-to-h8GYJc1^:+_X47C!"J!Y+MtWJcD"r]/h4Qd1rWCNCWEph;NCA.];P]0!>Nq]Y\4Wb!r[tmUk?K#(t-B^'2J\+!Qn6$%ih"-TfmtTK%"Jm<$d9kEoh,B-Am8_n#XD*\TBf=G#.gC]o#u4g.5PNW?lI[cFf[qqfE>@nfW87dBknigpTaL`AO/ZP"cd2+$02Qt%IHD_O:2s5_9+;IE;f9M>'Jas00\kWM7V[IR"!`,s]L3s*]S=H;a$aXp)?g`j0A7,,Fq"69\<\lgLl"sVBLL)]TTkp+?llfG1GfB:%0i]+#GtmiMm:BBtVA'ab]g0dtMN%`pRg_Z4&$7RQU4)-K>0:)e;kbLn>E9?uCQ0Ka)9nRHRsi=WI1*b2F!;'tJ'U_dFP0#K%p&rG%:e%is:/`(pZ]]m$j9`G'_`VG+5j+M_b,EPhNKn*h9<H`Y%QYpI/;E^H[^6m)8$OXeWGP:)gS;V>&_2/fAfk1Z7+ZtQ@DQ8')DEtY%&[SJH[,k>)GZm7B`0QUS"[K_lEAhfYAM[,*CukcJM0BR<IlB/NmEBf5+N1[FO)ZACJQmKKL4fUEO(BC\$q*d>5`Q`rK,f,J:-7i0%<^:BHg1Ab8<SbpX@E=+0[$Nd2a++2/;:F)BeE@k,GfN*:GaO3O@<.A2j&%&a=9gAX/GH[EHR^&GB\LJ2FN:=hbcsbCe%%4P(e\BD%$98abfc@)5#;o=-Me3I\dH;`T(F=K;Z]-77=LTYoEZJPqjul-^k<Ni"bm@bf6m.U0E3+Bg3"UN'48!aeZN9>^4ogRB#`O:("V#9&%T29/aU6QY#LBj</Wk^.m4BaJW5b]RC6Oh5-[M0-R'^Naj8:;Gn!th4a1]T;\]nL63+5h4F/ghmiW.8C[e<5MLn0O1n^=U\;e@-AX%WH-)2\9/ofCLSd17WmXr0a!&^[Mt:%k!lmUqL]1XD6lkXqDLc)?*Tk&4=]QXTtj_Xf.iU(Y^5N:pB;a00<!rYS'qRiq3X$qQ$JVI%$o+d<lP`;27Vo'K:S^\I<U$&ic>a3b"`@sp>6%\c"b^AL"b8`m"4\_SSJbK33'kgKK&!a][Lb.pPo$FGCdMuCJU.tuVM2>\pDr30%r!'CI?strW6G_sVnHAEiW23+J)7!64#U5oWJN>b"d'5X>VZd-Uo-2a]0HHT[lX+%e#"1`e@4EO7gs`duNp7MiN.SPtdfdj=!9g'j%B.?E,"[N+sM-\?<09"%>+Ul?7W#S`R#6@2-5emTEi+0Ke4i?fO=_U?YOp!CAZ>,W3.oj@tokl(71luc#O'<%Z30oD0I>N@oWreY?%k(7QMa[CapeC)9@PZl57M[5\AKjiPt6"@$^g#?9Mk7]VQYj&Yb@!s1t44=YDVW]lqlX6dqm1JG8Z;Vm%=_q$U#f1H2l=MB@K*44m%?glSHh*JuG.P-lu@m,rjMa`>mHIrfhEMenWJqthI2R_^.BoG=6OFu5&<4cUqYjNW0qnY,kYS_1&\8Pi0,%3p8ogOP9!f&??Ga8C>%1.%G6mE?q+F<"6;#%V_)kH>uG6P-\n<+TGREFd'MViZGP$jotrW:a[7h`=u@p;#\C\din=Q**NO#oNli`,c3jE<E]d%G(gZ%oZJ)%m=bP-iueB>A7.2t'p`fW!*0?T%4Qi_$&Vk+!2N,8@4fM(E"`gC1l<E')jBBNr"*>d$jj=aOXcD/JJbUg"mn9&Yb]3jQ$nEr7MrNn%rZp>Ze>iMjpIl#mQ$o-fJnd*/JCT\dL^>I@@Y5a\;3F3(MM(176^pPsI=bXlEqL.VQuX`\$&k<(JW@uAo`3[.8h\'^%N*n:QB>Qt%gB1G!;PjW'"ND+P(.SH/F8VGA,7jl::HTT_L<6i;)=g>WG-k?m,A\5\9J+6QW#sYWI\QDge5R&qb8-bP^p9[;]3&A-S$F'"$%P#G%%Q"$.FmRbi$"9uhCl=81=k>'!(B\,5Ql"*Pf=@9-m+J8kQAQUV5:e@GD(u^UofO0[kErsFRL#dJPM;fEJp$boYH<O;c3OT\FnS9@%<?pFXJ>+M!;d`7]<*#n$q>uia#^(.Ep_7e.-qhX6\/sB?<6.eZZ+`u5PXp?I='+.6%^+:%'blR\#dXblVp-jcIXm,s.btsS@(AAH%DXSd$.HV)=M^aTepTSHE;tZi\X`\Wb1/#-:HpA/YVcEe-WO]&;;`'TU=)4K,':/$:4]+EG#u31,5[`Q*YDWMlgDc!DEa!=o,+bt&%F@6U?D\Wl.1"fd5HI3_pgn&iWJd-:`Hak;?dB66p@^bo3ZD`Q4P_8ja0^[9g]o1NH>Cr$'6@FZBo3b?Ll<1U/Wrq-\UE^7T4b-OZ%Ph9eG&67q+Q!d:,L'oDP%O*=j[b@2a(\M]GP[(=SUT1GD4@Ue31`JaLN`/iW`IhK:aE@"b(cVq*6D/f;X<W9bh5]*-bq#m$npRmu%0IogW-j!oN@=#,TF\T6rcp[PC]Gq>J]8jgNd?l3inoJ(36m6H%fd$m1'f-!ST&dn.#eDX[/_%\N.I^?id:,9hF7"@%3p/a1?$eP.%(TS\Z9JPdm]"0!cJ->JqPlA&>j&bd1,^RuTMgeN[<diqh782ta!,Y#UC2*W%,-G>HO9"prGd/K48-6#0bAAgd3gX)ebBhb'"<ar`%=NqTmfFgd@(rqXE$9RBq)M\;</'"K0[Zp^Te7Lp1VSVa+M_!%7*JQF:S+!BB8'i!*c6ZkE%t//3^*#-JbY4imE>6<6C7q[\!>jnk%33s1b7pqGTMY/q!oSm-reAFUp/>nh"1f0m-JY;$8/K$3=#KDQXJTPP-en;c?Bb)sMKU4sU<[KNga'R'dRMAc>$XQ_8=bs=BBP<VU%U.nd<T*QuV+HD@sV2?8M&qF:do\G+0ZefI'bonJ3W#1._gT%;Pkp.#q4<0%;ld@$_Y()IU?#d!XJFf5g!R1[f[4lJ5/RiM&+dpFf%ls$q@\&hPoEK:T[.CVbb.]/0Z?tj)g_Iep]c>J$%_Q'go\X6d@inP_R%sU[$8'HF8aX%e^nSBO.[q/LnZ*ue+_hm0Vf1t!+3M,"t%ERGnPXUcCR7^_l1U5,=+;bb>=)mB?G@QX=cnSKm!dQh&?=1`dE<89.PTiMdjLZ(K:f:qS*b<bg1[I\#0!#T*F8de#i`9M'85&tVM%UGbM6i/cO[XjIDIk'_-*<s%8H@PP1J@^q!0QS*ijU2fhSTibLY)s%Y5co,[1a74)TVhr-g"q_^GESWU+cNA`rP`9D;Ud?+V#1qf2%a,2%I"!u;=GcR"ND"&7Ybb-oS)$(!kmL'tC<Sg99,Am#m0HD*UO:>Qte7g1oBjHff35jYR_D)8sQ"6&6[VuKZ@QcWcpnY.7$*fLf%/o520>1rtjJDp`"QTF>g"rqu40U%:hp@sBU9b!%:m#)6F46#dI5"):TC:$:$Em)9YY>S6FQo6nnnK:\kXXr.q5p5OF(3iUajR*S2%'f"j>0*.XrXGt-O8)Yf;_+ZGRDN!ZtJSPC*NY?$*;/:,:Ng#_fGl7^i8QdjpZed\CHO:W.M`QQ-M\4st=1C<-M&Q77YR%b$dB;&[%$j(d#U!+1A:$RFRd#BL4*)BRLr.>'26G$r+WY;2.\TT@S;F3[NK@,[Z6:dgP"D]YYSFlpG56cK<[<]lc/elgN\8kj9-Yab[("9r<%-mAf%2i/,NAM0?F\(1(]U2GQ1%XXJ2U_3*LA`Pq0+rCG4Ik1YV<6"E\\q("m!YSbch;ih7kpM-Yjo?:?0Q0kATL<%7,(dau!M8h$%!mof6,]!nFG7ooGhq$okfTr;3YV1TV*u.R&e+DIL:^sA[A\MrdHH<CoAG4hIADGYGa`hT$!ji,J566l!C3Ui&FPf`)c?RB^&%dPh%9t3t3KrVE4;1^qI4gHPg#g9gK3[nNjU->uO7)ZQWprl2g@EDC!!SH*UK"8=l[8_*,q2fhsP:*\+&6HFSX=*a.YbD<bR5>Z9[j`@$%MKt<aaSWmHJo](bPpc\E0<3r"<6;S"MnW7$FS]sAOCogZZPTE&>N6M#0;ac+q%2s_Xj:N98Jkb79(XDCp3h\9Lq66UBY_=qT6f5a%(c[UFN--c8\kiAf.$ruTOheAim_g$\!D1p?bW'V#gD\Xt@La<^!DQh))V<UgWXjp"e-j*Wg[<;-)*f)AhE>;qq#b6pbfuU>&?U^M%MUt9$&FMkc[)EP"^hohT@Jr6rRBEe$"#Rt\9#nt=$&fV:ogZ*4+12EZ%FI0NW;6KNH9jD;Rb%!d2;27TE,.'<?&u.>K&CNi>YH[U%7)B_[;`B48?*s@qE[5=4AWj@Q/HQ15OdOu?W*$:;gdo%f!hjDN2$2Bd&bu&d)s+[[)DGcZ&RA.gi4of'!i=Ai"!:,[;#gd.]>0/J%eRhXXWbb=6F=?@a&8>(`=UN+&]V0j>FmSWf9gP9_3s:AR#slB].>6o\&-.:lJDuKSe5QU;C'^7^%%B:!hQ`iu\M]HU+0QFK'(9<s%Su6[4J.[-a.)-QQ5jkC8UW.'"D-;7WNgTm91sh(3k`\8HDu!hk&cb[41s@B<)7BtoHYP?OJASdcWF'6q]0P1.TUJ/51O@!udJsFb%2Da"7(H^pV5t7Th;A\^LTWjlfU[HO[/Hl>U4EDI'.\M`=@3aJ-<D[,5Vj]+<[*#t;pB*+rG<'=<,WcmN6,NMpo0sEJ2D"L>Cq?IV%B>ua,QW2jPD"$1V(CX6;9VXlH9V!Kj<7hSt>i/?X0j;UQ2Va(^J\KsI]%i_=,_7,(Sh-QgkW"N=9@5G:c#s,\CU\hN!E5O/j4c'e%om'8STdnbN7-H[6>sX/C:)+\E:`U/&;>NT`h,H':P'Ode*2L0aK."-`DX5uKA70R.!)82SS8pl;k,8aMX4.kI1gB.9/MV!,m?l4/%I#I8CSr;iL/tp!nMe2]h-NY\u>VJO!:)q[MgJS&`9kp?],-guZ+aok"QOqcXib/HoT3AfZE%U@C0hR[ED)d)K3R,eX^JnPtJJgj>%Tp?FUBhXsfd=<+>=d?"oOQu^?Z.)%L"q3.`RlY3;I1#=c)#;bu)f#3=W^TJJFJqL`gE\0^BLDu*>mWe7h3ep%;C^2HbR0(*%'Hd:%\!o3>@W?:VfTtT%Z.)%u@T&q@#p9;qQ7E71q\BXn$#EoY,VYuinQj@4U5kg!$08PS7E:!:cjWV3_[^5m`\=+'LN1cY*HjbV/UTui%3!q`Z^acf',qI8##V[JhKrs!K?/NAWe[f#/T:uq7G[+[nV3:1iqijpNIlp$`g_-74'*R-L&;[)@?c5EhR5SA/d#W60\V!C^@'8VN%bK5q[jU^F5Gt(Ui?6V[:V[4bZS4=J?gN_:\_t?$AGk$AcY"o[Oj9IS[<V_%7g$W>&M=8G&"!/>aT7gk6kE]4eOt328b:?O;8gA;V%MSupr=YsN('Ej5_$DXu$K8>qc5Qu7X9GFsV'pKbjq3o/gU'%rqHq\eeT%4@-LJ+:\b-^.D=9kt4odNeP_MGD?;[hTY*ipP"'Q_8Z%5pMaW/<#-/Oi@QD=;;YI2W=j-@Eo^s2$Y;#STrd)DLJDT9gaJoBZ[&BTHM&J,it$75g98H&9,FeX+fjfQ;r>N-?Yac)?iL:d&4,!%HjSAT,jYq>ieMYj3]d\-#E+d*g6W\qf.Cri;'=RAde:\k1)EW::#R9mR%14-ffP'Vnm^`j_!N.2>l-L_V87/[0\mK1-QhMOB-RUW%TOTe53-q@mpCSi,Mi["eCU<b8@H5f*6>m<VChBf,&f@\[B#FEk<!%6:9hMhX7`noQEtp5$JUX*K/WXaR=No:RqM'>B_"TOn(ba<i%&Hl.s(dgDn3[gt3K'cjL,HukdY$l0I9T(@CVBR.U[b-`.c^<W%cp;@Qm"tuu%ImtSMDh8Y>?$,h8F32$4;#@88E-'M<L$TA@)h^6%ihj:4+SKk1!YQ+</:."X&rGo_"(Lp:U$oMAD)'b<KqWDJ"Xo:/:833p>[jWJf6mE<n?aQG+iRuc^t#XQ'2A8,LOiZ4`2F0>"J3:\%6eI=F"-npXCZMc".u<Zh'_W`>^pX/"@B\o%ieXs433*,$qLjM^lnsCi$5c\F+^;s/]>E^f#EDgH7(i+3p]_%j".9Zq"HKl45Xp!i%7GumQ?`@WV^O\&7,f^O']]2Wd'=(\Q?M">H@BC+H3J2k9&eX"@X4i=s:f8b>)SrQm:HEqF`/h)VL@fI%]i\;]Q'MY25l;%Md(dpb%jYGUg=9Sm=1RlXJ8P9\Pd57H)(Xe?tZ&dA-_.e[Y2^Zd<K%tT0;(N[VKajP<NPFUf+$Oq&2tV?N&T=N,]!rP`NtlN5jnFJZ&+P5o%%5bY;Z8*FiAQ"_FrY1"i3gOJ7*p\Ho?l"Pa7\AEHWVY<KG(tiF_C#<!%(Q$%"UEL\IF*DD_IJc`I;[:`;f?'t`oS3feH`aab\j]<%b6p'h^(O0_/O$X8DQlWYFOBqcX1-J<JGNC*i?2o%C+.4,]E&YDne1LEFp<#BCP[]35-mfsnTOV9gWY&56Nb`V$VQ7t+?m3baniFY%h2gTdE="MtZT1WW$n28).eNKn*Bt&6$L=&^06qr+J</:`q't82AXBq.aH&P#,P77X9?M\/9L>K#@Mmr$Y!":7TdiMHn4Eoda".E+%\@ia_$P4H[5d<jZT[EtZ$<sfr255WN$4XjpBLN!%j[3Ua+p-A^Tpn;HO=8(FDH74bZVkeRM89<kSSOKk4Y74_iPJoS&0S4G&ehd/%`m*R=4:FS0TOKnCNZ=aq'1Q:T0&Gj.4ZkDpEIcdc>V*Pp=FAEsZ[7Y"bF_4nj;V1l%haD:ne%@I`AF(9%+mN#KWpA^N980g(kUHA%]8N[5M[QUPEtCfj_`CFUb,qsFD2LV$!I/1=d\W+`PVih<LDhmS)+p^LRsW]qd&)V]6uF7rp2XAp$20%F2\,<2*UFjRF7b'Iq"dm:%_d*_F2?sB.+;GGT9kq3JOP/tVX%<@P^sEqToE/6j*e&26.mjTO'$Ja2<^?l&LL?Tr05T8Umg0u,5JaFP80n,e09gua__I96%OMBP%0f5ZCX0%WfK?Jgsg&\S-jeGm:UQ@"b0Pc[Fgg5>a?M1g59*):i:_hM6?!$<P.>?PHdhU5qhc"lQ66?AfCF&<70*H3);G]L#<Vi6e%1;$FOqkgQZfN-VA+MAl[^^.R%_lfIK7[:MP$4==K1_HO#Dlt"RE,_LsD/PgGPM[,Y10]TY<RD\l'oD'RHpHVbo+FF1KDjhb#-At3%FiWl>GmHtecE#`MX?I30NIDiF(4`!lFBZ?E^+Yr]F8mDBK-,('bpW8l8UNqK>b!WA=+"493\.2<F6mc>/gbg^O5]3O`"n\Y@Hq>B%:a-Kb^K_"O&&YXt8DLXLKtW_g>Z9h<CMKh#G9!D/Smfrobu/9P35ar><d(&P1tL7lIG;T$0%f)!Q\tB>!,T"5W;1$0!,XP+X$GZD%b20T6IQ@YUqG\>h9p]l<!rL'ZEHsIeS`k##hLUX96c>k$5V7l8,q#r+p2!/0CaNAVTnFto#2kc,&3n&$28q*9"t59\p@E.0/UecE%C($D'C,&fA!\hCmIR13p!3[A^[7QQ<n)HhZY4eM+O_m;l^p#YsYPX\!n6/nn2[;*ibOG4HPn\jT/\\'Od2:SmUDRA<BNa.)0!gmV%@WIGWGK&ho]O?[aJe(o/E7\-%Ref<m5:5e6jm^>/"N"&lajZ+OXF5.Q>?0-F="_5KZPP>/XQ6MggThO><iUMba0HC4rcSP,0k':+%U,K7sOAal<0$8_g,I8TAhH[8&*Ng%[hdM/t:$em/%)]gEMLjc+,e-[%]rB:^8RF8]1`>6R1lE](j\f;(%cs1gr7+j8_*oJkf`e]r%B@'q7GKj'-`>O6q;.)P]MKK=R%-PO;G+?+JU1V3D]`\R)cj)i-PldgIW1\]Dda-nlk_O.1EA1D6`SnML'8Mk-jshOE3+<nqR/B5/%cPgeMgDbuf<A@)Nc;8m=$>.)9pbH4m?R.Zt6-c(i6%F*]l3,&Sh=kn`r;bH6WW8n.L;#pJC_-nZ5RH\^=@fXd7Id[*ih<\.;3hf$%&;HK5e0M9NK,)up`9p2337:&en?NC0S-`#ii1fbY\/1KCpn#/.c?S36q50*O1sDe[K-Q3@Ja^L86_cOhA#hJc<=\E(,N^ep)Am+M%]2f6uqHu$CHOD4mXr>o[M,q[)KW8"YB#&tU+4LVVaE[UlO#UN)Ln\R%qq@F22T_VH@/HcYq$XHsO,$*.,*+r:*iH_Dm@'KJ],,st%g;MeOqne934aX_lYA7og#W>[b6J#lb&T"5-^+#ZdSi,2ScCrTMAth[[?Wim<hHg&U"5cUE0XiBui)XP(WfA&`FF\S4#^nL0EB"G\%gir,XT>%J=W>RAo/q%"PV1Ihn:q,\_7ftn+^.m%c)?H/S`h)li$=Nj?bljHFq97SP4hoJ_mC2BBT't?nqTQX)AgB@rp3cB/b0SnU%:>bg6jjE/)21NJESiKl//igDDXt#FI`Ek6'3XDTQ0o9?f0Lem*I3-[al\A)X"5gZ`!q:e.h1k!'7k)1U5'QHo!kBb!l\j8li.i""%_Vpol=_SH9b+X4-_!Npu6o;4T]tp$`M$NuF?F[2RaXdAmQ/jb.0$YHY$'J5_GhRf,Qo&dCecQ7AU+Yqd(%q\t'+l2m!!h9lNoY4P%JUEp^@AZDWP"=q-a"D+=jGlX"!*<0u:1jO`G8h$nUS0r`ojh.h'D6PAe.lp<g9YnZG(O2iI\<FBe@WqLSSKlVpuJu<5j[A.2$3C&%U#*5LrZYW$eem%,5n\"5NNjgceN3f.SfQAcA.U-qoPbG,'S+.N(!%XYjOlr!#uF<e"i^X9TSnSqkW(Xd5(#ALY^s5(j_ca&">JMY%%i?`i@'p(T(jbF=!MlM[H%t(Ali*4;W\t7Q;E)r`M^/P5N:l/-_"'l@)GK)l3E<D`Ps7ro"mF;c0"<,:,Pu\^DZZ&2-2JS#RXlT&%PUKi=AIklU*[(Q./'7te?([34?mWU9\Aja'?5*s=J_4Sih07ZFO:@+I$$C[-gIo+r^(qRs1H2)FlHkJ;,q1JGbNt!?4gIC>$'Rp$%Bg):+NjL=@J>aF2'R9D\TJoLJ5Z_.q$:nTK94mi6FdT%5),aIeQUAog@Qf#/+])_mW4"ks#%(00mYl]]AJhhmG.+^3#)37R_g((#%+MPYog,gQ>bJ>Ce)\Q+05e14YO<@4!8t$e632[@i;M0<#j[0KO(\A2POP\LanS/Ma!V#/=UOLRie2rrlq9kE1/&`\-@-0lkT"'f0%FS'mk:oR&D1Fr03Ap%_Im9]<OUE%+rI&5>l2!SN8kB.<d13<KFWce,N8WqW(S9?tkHTnbqZ]]15_S-e^Mb:D4MX']dbH1'[47P-%%=6F3PJnK/-j35e]<fSHBqK["KmpWW))dPjso8Cm/bs4jP<jHpc[lB\Kpe`Ja/k-Ag2#HTK825^G7T9?5%8`YP3QY<k(ZC34EWhZu%kTN3\ELd!"UIkK2"-b`>^IG'FAtrQ`9@>^;=#!9/O>A29?I^Qsp?3[m1gWj1L2i>lSSmc#>E.pEB]Oj1G=Kg[@fFR2n4&RJn(.2*%Sa^uj@QBWhs8#RWNMB7F;n>R,a!5?"B#g0ORN_>\rp+%q2B+ZJ<n-P<;]MI_mdH(KAVZ6b`G*tb$E`Mr=)P#P_Q^4h)VK*6l0^F)%NtccbnL-[7dsTEQs5aE`e42,]UD^JV:89[m-/t5?S["1nh,YuYDM?>n8nkYYE7LnNl9Ti'GBp$6Q)sBshn-_<ODE@7NHV.^Ah3cc%!gGGpZL='+FI$(!)GF(^l'<8^FD<L(%An--ChKkH=pELnNCnQ79r?=mC2,Lu9r@r,16$I$9eE6W[iSJ+Bkf@s/Z*NpR-:ZVR*pq&%bUo\<Dk_*Gc00LR4h:pBN?=?(C.bl@Bl0ci0e`10VX30]4k3#+(@=jW++:>G5Y2k_4PBS7&*L=R^$9G00:MYF*S&nQ\)"3?p!'O-%23*R[BV$]OO9Xg9E2B?Q4iMD=^5;G,($gp_*,;"7[A2#)N';gIG@->DJi<&\LhXKU3X\U.;(8TDn<WaUT'hDAU:ptX!T`@-)V%;m%ouG&%-<p&Frg@M0FL/_GVKOaFm<>bf&ej=V)m-6[:qP8^Q#"n(SZn\p0S=<!5SPgC\@2BN2X8\nN%9?eP-k-5juB,KAP?r7Bpkfk%rr5Gds*lsn]pjoUhe-*k&M;q6;5nbsWLQ8(`o.[RR137T-cuR+,e(_tT(_(]>A`HQS/pjbi+'>.'4YPMMDp#i2YCbFkqWDE?/>_a%U`c5(+J%9fl!^X@\Yqrf'J[+S&?2E>K?L;r/%HA^N="'jO,0YteAh2E8AR\q\HJ*i6uU".coD@^<uPKHX(U,H=I-_[nk:\<DJ8;.%U=OSmF#QC"8EpY+X(MCX&MVHWq6ruXmDpYpDa?Pn)a/j/FnK<i:3)=`FgDfOs#2u60YY(CC%fD#%mSTI1H+f@H$%/H.kFc5.4,)M%rUn,]=/o\d!8Ku0cF5!=.0\tr.ca'_4u"tM?DH&`BN,r6ULj#kB`:q]1hHf'K#LQDRXfAm6[thBBe"jd7G"*c7*.9^0]T`S-TKX?%"mlu0B.#;po(LQHO&#>;R!RaK]6RX-d;>t=4rpb/O0<Y"@2=fKAu_'3[[C09s1S*8.NKe>\Pjj(hc(Bi":Nl2dBc'Z_J"lA.oOUh%fSe1qdBTA"79H``eYB&]Pu9VF#2f4QOeU7nQ!YT`i#=Uu9&qMiAi2,.[A_s8$_%fO<7F6kC37g9X=Xf-K7>WY5M_p',KHd4V9jFk%h)NQenN@a;pnkJ6ZqlVo,R;;:He3-4EKjF:\7]V<J$efWCcO^Kg#5?TehDD!rkq8IQX+^!/m%5;;QZh=%]S=#&uOTrGU0`T(Q.WX%6gAIdpN;n)P`LJF"hoeU_LnSPh11-_5+97';Q3md?5$"-/kMf)%:m-'UMt=\F=F;Wp)5BC@1t6m^'B*DDj=7+qP"pgiAl#2C=H,e%/_+SE_]PF=$4EnS"/L_&+5tPn]H`KT:=r0_DX)t+I3bpcRH^Kc;n6/t<5,7B::B6nWUjQ3;G/6(s%jL1KO,J&jA45IDLhB-"K+P]%TRC93!7Nc\)fo&W\F*s<nfZ@skA_5*[kSDf1r4GK.;0h#i8+#-?t4@rN7RR>4:u%c-#@:I'-Ydpdd^%b829^G02&4"&CX%'^UZ&-%1(hC:]nm;7:7&4K)(.BU+pI?Iis(pq7#3\T1U`f<9nX@M7#2OM0ejXCG=<Z%-]]Ls7S568DJ7QInH,mNR9\3ds8DQg40/$%@+tW#%!B8O(jPQ>jh)WTXlRu"^VdF4[:7N"^V<RY!Ir?lfl9=*p&rs_IRDr2k>q_lGs.k/`4mK"sRL6!mJ@\;Q[FLFjW<+rVngT1PRu4,C%Ge2GbBrX?k`R@dK9uYT6M5OmOj5bF(O=*OjrTS7@:IY>"\jOp4&Fhuq6Um,_\jQHuG6i7FCio*3*p@%$oWL[3^Rn-/F)k+Q-`S4e%_k/:i>Z`o_KZES-BgoGLPpNpRE`Ig_ES!<#j"gFK-R8XoPJ?4/fAqS.j<nArOqcA\32Y;Hr15EGRW&kZaRMsB2&pK@jr39,32X/N%>dHp5[mBrR_,T^]kc@[sqFd^-V.iD--_H.4&l$FGIZ&3n>AhEHY"hoD,'I3kl9B+fO5j^IcR!B,FTHhN+q*XYp:/8A?]Bu&DiHAu%GWa7&lmHC`s-D!1O'Q&;AI:'$]EooW62FSa-V;b.9pcNp9';oaF].ScM%H__h5ZfCX]BHkgi4-!@t$2/<P-<F>Y)\$=2dFgHphn?%O)E?VBtrb'RiJp7YH?gZB:_etY,2fSEK"!pn6Kn[Lun,O\IB-D[G`6?krEPD2W$>`3K6p3UQe%-D>IAM1eKcf;Z?[39V[j4U8pt_%PW,a7:SX.am.Hdn.-9[YM;$e:R649*;I4b+ds;E)*9G>r=goF5)Kg<jf2HY>^^GX?:d:^i[IIbfaJtNsMiN2!<.\lm7h;]9r>7/Q%hUO&XYG^o89!bcc(_)[)mb*tN!4Vc.NOQ`pUh/B9Gq4d;CN<3>CXN?aS2]$5<uTVfZdt#VCQ2@s^X>P76%5\1!dj3KRQ?q8cDH'8%@Br*l3H[5SSP<$qdrkQB+!!fXs0#>dG-:Z_=-B>_iEp4G5'do?<W4;8]-bqt`k3;eMDBdATXiiWJj`qGqF./B9bL[f12i(M`c%JN%@^6I=Fu(U>%C>_?ZGcch9QB]R1#l!scPq8l#1V8Sj4a@-.BS\=)-?aUe9CH7ogeLNB]"M`A1/86e9<Y?>tfY_;r>RDG;8br9RR^U%ho5W*n)>ZnQ/<G3r#^*q*#T]*!du`2V&]M:%/dC';V[Ghb<P</\KNshM'_sHMI=K4,X2IsdusWKa[[<)P5IOerVMsoEK0LV0Z!GW%eOo!IXBb"*St9NR,)+&0/=Ts!1H&n!"CEgG=q$DX1%oB@g@QfjF$):m<b>75PtA`Bdjo!-&TC+.:]?V7fq">%Mm2"31&Ye(Q"-98%.p-[X=nCjXJYn.;e&($M>D1BG:+MD)2P4aUfD-ctkuW_V,jG>f/*i7u*,;"7[A+3cH7LJCPGo5%NVCuUr\nrfJ$G$C8dQT+Fgu91%Fe.5PPACK7`0hXfKGRLcr"RoRn,'%tMGa;MPga/UR:^qs$qi2l4baY#c:qt3Yr+\\(Rh4)J/%;=9k_RG:V\RU"RrB<@!k\)$2"Gr%PNrNG62K(E0I@Rr`,+J5-fBKp$lt[WR!Ji5!!-"o^jiTI3anI^WNikhVH2(5Gr]YoV+t-@dAWj3_pr[bRL@%sI[<RS]=!&Ig@&`*%m?;DeqH-A)1CN?K=/$dZ.\5!fm^/d$$I+S]eMPIse+iC8`ru:B;U@W$(W/5UUMish%GOaR'n,C;ohl.o['09Nam@c$G=n=SRb6po%VO):-4.7,$N+90^i^b9ucWZ<3MI!Dhh7s"[J((.@8>0KNDLhNH9dnU!W9I#)^Y<[gr[*joi\<I][SFG7Gre`ag[)@RqN/_R(g$V'%:Yk\_6a"U>.DqR"%u35YDFGUDRSf#h*`7e,N,KJ/Hm"tb<E)']hO#!M0[1h7-1/`A]QH[m8e^2K+.YJJ1%+Yfk^j!s]+'d*B,j%E%;iBnK=\Pg'a4+^ig.YG7C!9%$[@.#Obr#:LS_?b9S*;TNbO*D4)I7\R[@3sndsnfp7^LdtB_m)A0f>EreUjdJ1c:_>Hs=2K<Z"PF%7PX$pdulf?B%*5=UO:o*;i(7S[@'pp^sm+f.')Tu>l(%pdWJeRen@d*>&cd/\GtAI27=7oe%>?l[,QOTjll?VJ2%[%ks"Ao[_-]_%PmY/&1@aXD2(W%9AMg@5$qll2cdai^[!(VF22.[U2#I/!_5W`6@^\f.en9SXaDGqmV;1=qHKqog<H>Xl(0CP$P*N<NC<16Ua=$M)%;PO?mm;D5@/4E(*0\(a+e,&OF6Ur(4qBL$k7U:Er2heZes2&+be;oMEj_@fee_R(fKQ^g0rU%XEXn7WKaa$%/Vrlqk;4m^.MW9"R%VB*IE3(q7[Pe1J50V<etr\':"8_DpG(X*?Q2<41Cq7PSB'DQ;;>Gbib;IsCEcgO*qWVNgJ$ZW]@Q2&0SDBQVUoshI0Bf>8(YDau\%A#ce-24"9>YtPmuha,/BfpNMPZ.p,`oridWGta:m5F&]=`bR;Oq#8D#J<A<1R=^8Ja7P;M=5EP3,b<]jl!^X@\Yqr20#aCfd5kH$%^V$R<E[fc_';uS:(R`ug42,>oMZ%p&,"@`Pk`%"5qYTm5Zg:0Ka2pKf;NO(*bJm![NU'`5=q$DX1%oB@g@Qe_*bBic.%;20lLZT3%j09)D5T!;4m/K'I->;X^cOD20l+9Kqig[WjnXc#.f6Btc[!I$ej`lXA=t!7-XoTV_+e3PrT4,JcAE4l`Y8#CbgPrN^(g@$S/RN@%%PI`W6##r"Xg:M5INT8=!(!$8)].i/d(A^_g`;rW,23kG[3FHQQY7C=pY*m$eMZ$aa\MnLSppVP</%tLqS+af<#;X)=%V%Nu1KU8F%E^X<*=(5uiLR[9JU_BTP-C<giHn0QDdf,;u+2C]kc_=I6d^g;4_RQ[Y-Tk,.NaqIdo.m)Y-Yf$P;gRSP)W0?C45G5IE.Xn&/`<F9%O`<.cQ'\qW]_#9Nah>AsC%J3"'U2/i-'uZSYhhQ:E>eWJnFUSf*rM2d1q!bLY8/CB[I6?kk/MMrWV=30L!$(2<ic8L(<%p^j>8OY%GNIrbM9^V8M^,R]*S3=)WgE+>7f^I-Eq5r%5EI;CFX'Nt]G[8AlH'8e0:MCKf1umV?2<r;oq?r)\SSfr)J(g2h=a9L0<Brl;(K!1%.SJd(J!SImF()I[3S2^9Zoi4_W[esQBm,duL[ZI>Q,0p#RAH=^hA=u5hrnoN1/3Hh^9B8'F_#iY]>(=3ED?<s2=-8eX\c+?TA@r7%O>clW[aj'7+,$2CSmHFR@B7mS.)K_2.8u%5Ml:ds9DQa)MHkauq96-N<65;,9DY,\j/R[Jf37/KK>589_Z(WHrI]AZ8mf?%epl4-%Z0SAM-M!5<1P-MX9S1Z1ml"bceLeru29J2_hu*:;S_C>8Vlo<(M6dW<KDcI)gqUG3j*5G@e9J1N9Ck30bbI=#Gb_85S\&=_Ss4om%SXeKRMV=?>X#`fCEe^c.n.2VP8k(D$)lLRObA"V@*[;s,LsSk,l\ldH,8k1JB27C.s,qmo!e.Z7kFTbr.+siiFJb`(QR=lA:ZOd$%i-Oqebf]O'j%!DR7B.DM+64:V8nICR4=sp]@=V[)<2haU&N4Vaq_N5$+oHU)9#0DEZciLPj,cJ.oCNRQ1BCu$,[`0RYnH"MJ@M2o%\:Ssa#+;sRR5e(6m8*PE?2<N]"T<i[\<m$\aiTbnq!I%!lEi[[U.QcnM4HW:".50pF<d^I+KS&':8C@$E%8mNR,b_l#Qa[VqVc[j%jSS&SEB,lZc@%[:Dmqe['hXXQ"gl&C^R9QGbX#r^ZKC#BHdL9Ks#+L5,`%,M97tE-L$o&eY,'PP>V>UrnY,jA5cAlPqoL`)>5>=3%5X.&Kpt2?jB)AjrZ-;??cO%g7/n]o$_Od.<T`[;4P$B,q.MAF"h]W"oR(sdHpme@EQm8lH5p3E9?;Ef!:J<^cG8Q*QI)a[s&1<PA%dJZnJNs,I?Ee'1J#NR@NNl37Nm2]$l,Ma"VXqRa:neiE]b5l[o>'B$^a+m/!"p+>X:a/sdrZRE8%L&X\i,k0rofg`N\IN%IdH`N\%7MWF,8cZZj8>_"?qcs+2*`4pYi()+9Kfjoo!1k*Z#<3Ug)-ZJBkj;d,mK$kk?]bjfaid8L0X/MqK7>,%Ul)8q*W<(12QD;is%@%^%]tc.[)d;im;R[Fl48H)ocHMl]i8:B4K"iU+`RtnPZZ6o)P=+c--n6%.Zd*>C'4g.U`#O0r9"ReU7Eb)EU\G;nY;!1m:Th$ZB2@Y2%eCuA._cD,$PVF`D!dp4cfM^/cq:gSJ:;'LHkp;G9Wf>G<2!PQ-70U-t9oSmda)tRb_mf/*((A9]Ou\Psc3lLcdGmm.r_:T9+(sRo%(W5T2Wps.5\<2O98$;,&D=lBIWOFoF]jZqUiK_"A:8<!=P3gNbiG(FWN?&Ks\]*"&iud.p7jHJns!B2(@@+FKIZ3f2I)F^3?*0><%>o%M%.]c\\1Y$-8'`mi[VT4'TBtcU0qR9h&^<$CI52C$3Xr5N!UE^9gYVl,YQ1L-#,"9T24#]7B-'p7]JrNsE;.VSqru3$g$Rcke%,DS(TU.J5OF"@fL-1,fi;LQmf[g9^)2T_I4:QmTc$!ZRi7qr+`;/#FZe#`6#4#a7bmN-1](E0DZ3:c>Og%_XHNNR-R1Y-+&M7:g%%;*m=DSOV_3>je98J:XVdTRg0^Q5<"3X72[;CeY7l<6LnMIH(FAIdQE[4kXUmh8^F\L=Y,YL3N.#K)/i3m9BIa6.X%fLa1NTfkR%d%U3=0>4k7:4Bn!t2T/5bsq:6"UPtiet_DWEUIC@Pi<,.]u9BX;g1`c`NC#j:0f/sYYR`%p!@oc/i/]WRBp=YLr-D;2t_K+;>W[]qb%*Pm6$j'LEW[*n<N7,qV?fcA\hf]\]-k&++/f6!a5eB/b%OW&?tYs[C5'A8p!ZPU#&15B;M'=A7<A.GAXUY<[bb.dTHh+k<2)?#;Y%Q=5F]_tnX;4HD6&NFoY6>R-3"B&<nM@B4J'#[?DLqXR_-c,aAqVgN%0(5aB(';*pC84G55Ih1:(;KDG%77F;HXOd+oEub/-a_[4m%Saa!!$Z@E?fZBZ:3A+;^9h>=EBE+(sSBI=6%noF_KpJ1BV=.9\,DeSnX.d,nW1TaD.nq:knNCVE+^j"FGi>Uj-BeO8NZ4)/U*dkc%iI6d"n*`hc!\DZXpPPB`Y]P0I!in,`;c@HIU0GXFiu6KPW@++/:>"f4'b]n@[3L;^gJ5D?M^O2I>W0/4]0D%ZM5B(5BlF:HisQ`q%C6Grg]PC]OOmIeH@\XXW42DpmmeE&nWS/pk.QK2[To`SN;)9alXnK)Ugj+m*-`gW;\b;T]7T&GLOS(0H3^mg275(j><i8hfoJ,Wb%X]i(&1Da&lm42>X^2f`n""q<#$.%^U4lGBB>M2&pT7\2$8)\[Mm=M_-PT\3&8f^KO/.0h>PQ<g#`%Zo>95jXg/c&+YnR5?Wl6U'[%f8b1!1Lg'E?D@I7:uYiq`QVQ30>6K@M2?"-@Mh2h]?RA2%%Sg:`b'<9O]XF+>01df?G*><)a4kc^[oimk]"6Vq4<u_ci:uY]RNL#%q3UQTTtGX#CWW]k2S/SN_m@bg3H,c,a]B^q1N3!tN#GaunW_P(9ga'5*Hb0()V),U_.+3r#dYe'Y`sm5b[+Bi8k$&1RnCBLpb@.a%a`alQQ%/Ym-h4^0e9(Pk`+QIu:*1Z;`F`3ET"3Go:D.[8k\/TdhM]<99<+1WG66[9CiquPZIkR`("i\7=uE/A,nJ#_<i(1a#cH&#%596e/pL]V+WgHL)TBmIq&D?<cK_h<bEn"oIoKA(knt9IAU[9qMSSFuBANE^"*Gih2/]2n4OpS1Sd*0Fu)_??Zah44glqX6YXl@RH%K=q`V@-7m=eSD?17Fc$Z8%o@g9bl<WXe$'0m;6&fjJ]JM:UWq\5))lsoU9Y-g7;:)1)eN#!]4q*O>"#&,u]c:8(Bmo>"HAEJd1&V%W$L3C4t=st(0pAs@_I,\*]KNZ?GL4.eV;T6&#3aGg:$ibs4geHg6*3I7UHPXQPr7O,&N(rIN]uWff'YonhEd/XP9c1X=P`B:+"`_%1p#4C>8gS1;.aJ_9cO`IVO!Q/[BhR8.Z9dV`0rCR7^f_ESsO-@Ja2Q5fRg/e-+6E+e$`a]n61ofL/#d%m7OKb%=>2.KLL\dGNQ3f%-s]H2beVWQ]XDNCR_tdK81mt8G.8*(;+lmL3@YR17V:aNUXSfO7oY_2L:/'+VHfE@b%8n'#=k3L<`lLin"I+7Zru:!Q4mp#XWhR8%M-dllN8FSLbU;S,`@i31re[XQ>+S/M[_4d^U:kHP;iq8@Ncg`.2E4?#h+I$V>cH4+X6n2Q.?8DL)=i":QPmk.cG[RI\I&+%f*psn%92(nt6,$b).Ec';Vr1fqe9fMif?<M=:,DeD;<#Y5,"S:/4fsH`,Po`OUO$V9G@e+4PEA#NmHjU!0.3P('cjXQl2H;G$gV^P5?nTR%0(+l-qb*CtXmOi]l?W?RDW/n#gr!AC>]/H^YF]V$H`J*h[\)p6VlRdt&,.tch3'1&H$fOl9BeU[C$37ncPN/L)f)(4+)S)42VT2<%kMFA*m)E6!:(&$.FuI[=]e"'&e*&2]H2OJ&?XA2+51!<7r(cr5nqGasnUA*6s8$Gn^0b'fef)N9>lW*g_@qC%>KG:jD`5@2+24/2%c(@#.VaHU&(VuMarURkHlu?q=p!oT[gT>qY=MHD7g/r2Ff,!q8Ze`LRG55rd<_ZWRbK52lJ+i,dfW8sihl`Pf??C3(ik=)&*FBlK%95a:S`qn/>D_rM,E]a$kr,Y7)HLNN$;r5'k\`A7RT06Ah=4]:A%EmRqg#22O6><L=?I%XbkfMP)G*Y6mfR0t!ARQhXn5UVJFWWbl%]mK3WX],W\iE'T!l`>?)HZksF:p__H^T:I"n!5o5ZVMYq[2(rLZc/[Ehgk_%NO@RM1,I,*?@U\Mek6Nh$]k&5<^c?8j,+Bum5'oB%Q$1r:b>m/'/EM*1YN<-JLQQgKSFUD@[h?jVFnZs'/M0G]<H1ja,C!:[h8nubhg;];(pLGRQ^nZbh@l#eHsTp)?2h(nS_j7>cp"GT%aoOZaO7'iII,Jr<b<!krPKh9r^1:@;Fh-_GTC2+.=2OV8Kf]\2>L3b5#G2_HeRW:C3PE$leaJ2>Km!!&rQWo7h)r0VogL+shK_2G%Fl,4f:S)ASHMOK%Nt%[>O4W"+?XJ1].qo<Uq"?Y7ks[MagpI94M@"7b*Zm_DLaj7RZ^F$T;k9!':FUe>^Qu1Gq6(2%Z^'_2[_hOm%rCqb;lK.lKr5k/hnO9F@4h+kQb8u!uY'sE!H?W0!;guLSp<1pfSKc=d4`'uj1.LD-QWqdT_;7'?B1H0;24kLu35=tDhV&p^6@a>n%G3d(PGeH]+mM7]aXc$8&FmmRR[6d'X[('AR7uIbENSnmX<;$ea3U\q'H=6j)bj='#j6g.q?Ze;u?+)6_[I$pMSgXHCZ*AK-\XPb=%m;rT2Z>V$&o8X4Y[WMg_a&7qG>HVN6kG`eF7"r/Vc2$,u5CC4glE!4m8$1@:'-02AZ\7Q,Y`hr>cCXC6MVH^K^(atQ5$uV(Hki@3%qg(R,UMmR'g&96dH\L8.Y4&mH:WnGs\b8c)cQR).]ijHXho*$MVtg&ck-O)pO8EUXR?^`>qt]X&fgp;ZEZHD6ER%VB1^9rHDc`+:%(-C9q];Is!YXW!lc,eU6]5a.;Zn!,ljjJndDuSV=ZZoGbdHZ@QgrY?C^g;?qO*BLM@]/B2V&U`Nl"on;G3>Z+b8u)bc*((fcP89g%Z\QkOp3<c\^@D&E-S0*00Ak(!XtMb=+74/,[h]o9]YXcbqGsbE2qTTcIX?ScW!uW6[:"IQiF,T@a2\^sLXkO^A@n2e1F`;E;K6sO%BK>tfh,/T42Bfs-q8pX]Gd*ejIQM_"Nf6I=nn6X2T6nk6_a<<mrm$39L6T7A88]l"g@s*u5!6UH3GB+E5E^fcG%5=X\F`nKila9$%A&#^lnDl;Ol=os*EMK,+<*kl!BQp,kEW5e*B1msO/N0f(_H>)*eTLKD]oC^ilE7H%C\8k-T>H(]GsjSt7uh!Gl`ZiAF1!UqYO\R^%gb!13YMFD`"8V9M'+#%*OtcWX;bG7.*Rcc#00Z!icf'dhjfeL<5eVeg@g<@<s#&CZaEC>ijfbk5h#nW`05bh]8KK]\i_dD=o)0sL%`7m4o0?\W.N@"sfP?:d;MA.pAKb=;F^NlV`#+6Bpl36&4T-?Yn@&Ltd2)im?_Dq;KC#\O9cMkCko]iFRf8"0_.Wsdt)`WcA0,%9W%kO\Yi(Pq0oerHS>TrqPP?W`,uAPcmA$fTpp`lXBsRcY]`i&p[+LMdq.<V)..*9aqg"uR1.QG$d"ZQs8gqA5174AGfTp2UmXN+._>%GDaL>`N1i9Zd?m\PGRGHblgd3@a*2DkbK]b8;t)^5Y`@U9`:"9c_BX"-Mae_mY</QSH;".WEL*"*P.To<Rl-q(c@:n-AH@P1[jfO%Ck*dplER9&<6p&&WmgKrRe!p`'IV)?R<S#7a7&5/Gb4e6CoDS^mE.g%Wpb5IO2'1p?l43cE_eo<1g`iUrfrjl0?D_NLM,erV-<]-%flph7O'b,T(H,OmEb9KAG5F\--#AShFHc.9g%E3RkP3HERWEF\@I*U@B6]Xmh+ss_$*BlX8kQO]R8num<aXo"]T=hlgcuc/cStYe%WVXkh\C-fYC[[18/@iF.X6bAn!A,]%@:n)/loJTkC%7/ET0N9DPJ(e(7+oKSdAuV2B;`2G:gBFSI9J4="LCfZ.LtWOj%FU#oATIK%G!EH]!'6(dY%g*5,:ua=_Kn_@:c?6ql.'3CI,$m/n$X9c)299WSpf>75(E0%lH+dd=0n7JmJWtp<50X7PfNL<ASX@Y?Z/#2D`N>k%J[PY''B7Q?k^!0oAc$/;EpuB#jOUf1f!gK[pVZ[Dd$:KTb\Y]EME)B*VCh/Dg&48:l^O)CjXX\@40-Vt9E"RH/*H!8(Ej:3%3TO;%erPb.HW9qXUQV-`OPM8,Jj6R?J1(0aV>7%#K9tZ@(TFA#5KmCa]Z[EVSig=:CXkLB4grG.AGbITC^<Z?P?``mB579SVrSmY%uQh=%%<Ej%\]Ujqn3lkn]E&M6<Ma7=li4ZPItH&*14#OU""Gr<^77:lo%WWOR5Dsn4NH3RHi7VbhO4DrB;B2^gVRjC]Zd"]>1e"mdmDo\%05p(qW%:qmE@r&@_=`*P_<"\o8eaI=H???p<UYD,AqQOj<e#PfrlPIQP`!)B0+Tu%=PhS7(^%PMDDqC_`R4!<I_LaO@V0O@E5Z>^%oY;n>5AeCuEkfr:H[dKr-$SnLcK`91m?84EXA@#["dbj"?LBC9ec+JXhQs9@C&,Dekrl`o5Hp.JB=2!F3g*(j(GOV4@rI.0pkJG>%]6f92bk-m!\%2EWiT][t)g60O2V+J7].;.HM`\V^pTmBEjf`]1*k/eA=*F_R#&4;_cZQo,=RJjGOE0^P7D#T93I!!,WpJhg-rCtn%[n`C[l,MGXLW]uORE)=Of?Ur4?aIeV_KW;<eZ)RC\3VAtc^(YSmWW'_bQcTaj6S7UEG`m/gq?9i.<dF:H5*R?^Q-@@&+ZVT3Z>PU%'840h4dV[DQp7OP(%U_)\+&J7Val@V;cri%[)KuOh(5.&W;2\Dnq?ITo?2pNV2a"A?SCdYFj0:il8dlCPg$Vdr77h-=5L)si-[_I%<\C,m?XQ(PL:HXK@j=:s4D&QVH^hGA-h7u;;*813c2B8?0;nZN]s[?cT-[76R.#Qjq#,Qsr/K5ch^WDScVDeF<o4[UW3jLo[X2sS%1TO:;ou2.QRDPLS]1kq2:>4s'P$GcrC\ap>?W?:n^K76*!9WC8+7J$F],.ZO`FF2?4h\UQim^3Sc]7U01UC;DNP04qD.GkIPn'hc%IHm!c9V0R:8q@o9(%%8&YHu9g%G6EOdNJ)GEuV6XTUS)(>kta1q<X`q'n>gGY"M*pdDsYp(!/2L7oDYKpo8;=G-TKQWV>IX9eQ#4%SW.P`92YTeeuG54:RgOjm^(N'"t#[=l=7m/^F^2_)SpgY,PSRTj2EG5q$JC^=PBk-S288?Qgaa6ebs\2CX'X8*1CRHlQTO?s(16<%Q&Sb,eT1KXgL-6>96hn0s0.TCpgs.Y+1dqAs.8\(Mr-!'X8=QNC;CMqAq5e=I,]/1m0C19npB'-j,Iu0]Q(-GX$#6SDla^d6iN=b%h9N^T]ma_(6Z10cZ!Jl-aR>?'%lWYkY;<EPTC:TuLPPK,0Xpqd(d.[tkSPVu/E3sG[-)i(q>KY_rqtV#.TW%^3N3Kg*lY(Bed':A%U'<=-L\:K?ZR<QElW^8;n!h"Z\#.A6IW5=cE,tE`OW<8qa0!Zp4!j!@*1Y@BcIV7BUUcfGe\).W+a\V7i(afh4Pd8UMoJD$fV5<u%0`Lb*'b'["?6P[6,ZVdBS[VLWjVNuGobhLZK?NW4EE33tk5kOe=d+KnFKTE]#=/Wmdem!kn^sjSO,:6,SmH<95A@ioB4\L=4;`Yo%g:Vgcg"iImm_4#@p`k3SC8=>DlbP?cr"47cgj('fO0(llhsl[1S;+Z6l]f:ujIS1?h?Pcm<S,"WU+lW8TTag'c7LD)IJj"33FAom%Moh??Uhiduq>JM.=T3%Yh"Yp+&j+W50=8N#GgZ;T57;Y8q9qj!fqA,:[9gpTlZ\UU[#\STl9ct<ogNc[A,c;qobFU/GqY5E$<urO%>[]L:GS_1gc(($ra".(-+o>f6cSepT-`kT'aIhb6]UYHeLEK6Vo?VXKk+oBNh*C:ah1Kp*%B"7kf=ZQ9\FXC]PpYiJGUN"Ac66QU%2LOd;d#pn?o@g\ga5SnpXu9m=UMj`Wed?I[[;9gPn\r1.ra>2n0\`C$\@d[D2ot-.)Xg+i#0C5WJu)q$=`JO:Q^.S5gK7fdSfcYo%1jZA8cJjnjd2!VTA+qU^FDg^#em/+E'*o5[J$PU<id8'7EoSdc]<[cuiheYaG!$Imqf'"Q-M-hFj'r$cdW2p:V^f,FMsjih\'F^Y%.LH/kjlOCTm>p#.gRil80:1K_j%clK8Zr'4IAMh"(a\CfHt+hE]RR2Xi7]Q+Yu,a&^W<5i6t`>FYu+N;`jI3C]f%#n^ABB?d\I91%WE32+]GhgZ"$Dl3[[ZBb_VFbM+M#RN='pEh#7mifUXS@n[MD#TpO';jfDh;dPW#*j^Yu>ScPP-T)mUNB[?paqfq[scDt$##Xo(qr%d[%r)Akc0*jb5@7Zbb01_#EWqTq&C$Eq/#Uj[PfX%iQspXjb:rV%N*T+2%EV'n4iH]3/?_O>rnq`tI+Hdhcra8llXFq`\PII5`iX%3)Imqj<?d7oM)@@4"p(k<oW^dlf$U8K5NL!UtnaZkt"H/@?[`=[5hSdd,hCpk1?dA)u6&qb>*M1DQWtJclF,cb#ZEK;N8+G%sIAK%cb!J^N=RMB`F0[d;.Ei)b.r4Zfp@apj9\th\OgeRg[-s^+1Beup4F6@<)?3-X"QZ/FphY@HSs_9@Y<q6PH=C9g.[<Pf]RQ%At@*U%no/h8QToiD]Z3+[4-'ase`E'f?7MQ`cfJoK+,SOo$V(a=>3K<011)D,+eW805((uggc*P\ZMo$Z").j8U"]n2DRATahT\:BrU_Z`%Xae&(0::2`^JK2DT/EJ?ppe1B:\Ps,I2h#PUiH(o=lH1JBrS?,0KSV2`c8C`["L`_i'8@.)bV!]lu-ljqn7LWEU36Vq^-g<*`W!3%QPEaRZg9-Cjcio2/[Z?MZRQ*G]D/W0XcP]uBWgd2]8^.K+QqY;i%SN\KpVU*Q'IM7-X5!Lqm2hFl^h'MNoZ3b._s^OB)SRf]AO(M%<an_HfYMoSr8lU(+lCPEYiJHVEBILK([B[:H%$g\DdKTK0,Xqi&*(27E(AaEEh'Y5V4g3Oo'Rio0<@])<aO%C-`!SaIXKJcZC/=+%fu$;L$\._ar\A1C_]3SY>VBtHIbL%[55/fsF&l#$4F9:njGZ7tp1QC7qDLC!]C!_Hm<9r&01n^fm;p7jgVkmr_T,Q)0,<pFf#q]%%V<[YOMWj6\2AJgI*VEaaFb$+8q5]/=MVP27((7J:S@"bm*\QT!n!lD[&a75/QbWNCQ;pFA@C@Rbqf(<0P/dn?hOiEkB8o[pb&oPj%Ir.UPV@VPBj6c8To5jX$qftD4I7OB`\5hhNrTru;,KBgfgg)G#/A>HX)iM[V][c4-[X7OladlcQ*^\B2mig@.B_(P,j'-j6Z9.dO%T.9<t-)9"q!*J%d?gktomkLSE9)Wt;n8N`_n>p6H,&&15\\FZl?+@q<4]a`>[n<QVA]Q'?j#o9Hg>*"<n0am4XnR(O5DbB-cV**\%EDE#pX0X?/m$4D$gW2j<QoL(Zb[oBaeipe$'_S#,2ui.?P:,brU[#i+,*VTWTIfhEAR,eU7hsi04P28Ej)h*Y3tHqpSF9M(q=2nF%pYOJlV9P9`H9&V[SA/c0>+\+Cm&$8Qh"gG9m[&VtV/LYBr_d#Bn*Eg;OXk:#g0L]G^H10TcfqN(rneBY\C[3%QWJm1alL59A@\f<%Gu+t9_t*1"P6ftf8VE0YG`XSK?q'!K[G"XTs#+%W(0IQ.kJF)K%]j&UZ:`<Q&sLK9c8U4%odt([H'[%oZ.Gp58f+U!/W/G8?GZJk%6saNpb:1UlYNm&iV?l8aW\2%`J!hj!kJMYs0Bu?k(*q/X<p)uJFfD_29su\7UF,99;N6^"BtM9O?_9'&`OJC7Qs]BTVqFAl$)20"%?pY>AeOo(=Imre02t^'6Aph:%Yf,4gE"@#)c;B94g!^.3PONARE85,e??YE+CoPrE%6MPuVqbap=m+E.BnBu,7_O88^hQp]niCO9%r;7Tg4cBa]dk#.7;$UOVW:,u4Z<#7#=;R0QpT?+e^0Zilc;XaT*kAP1Y0>[V]r53#ee5:Ie,5IETTI.3(HNd%B')L)HG;R7;/SR<%TneIiHL6Xl>@,QWcEbKnj,rA&V7%2K0&K(sOuGj''ksVi'1L/9H@_6(.A$G&?SRo"s,>_4g?sLVVU;.nCf^S=$]U;o\o*e_-/_W.%VYYPqZELtYXt,%6D?oeSB/'KoHNleq@4++MkgiMp@AV[!4W(LeNYA6;f=n%-mSu>HP9A18>;^I";$l:I4XoE\CPK5]lCPkM2X6i#%@%;?%s%o9Hg0Ha9:3[dR\A(qcl@Ia$48#pL?WksaVHBj`[V8W&\W-g'KbD=10<@"&ah<n(LrAO6GC1R1C.>L(VK3>\b5/"79H+?e%Ip>D79O$+QL@ktRVt9DHd8;]m?Y%#34H!uVYX3&,'m+Uu%rLuC&)*Y8DPekjkDU,$O]HW?&K9hX=K,p_FnJobTb]:nA@M:2\f=JB%df;M,-r]BO2_ng=)QMD<660(Ye2>cq#diQ#2'H4]+Ji9']H6+]rT`8#giXp^NO,"@8itM(?c&^9QENKU:gB;iQ0)I_e'RJ4O/P#;%Iretk<lL5DqZOP6RsC*4jd_$V18tNdML`#gK8_R-h`ahcA$*i+TH]uqn*g;5*mT<^CWO`@(fm_sg=]^mf_O^&(Ks$`E,]jmkH;Q@%41s>!9lHQZ]e->R+IUED]/?#>*1Up:AcJnqr]P\EEk*?uhYGE0jPPi*IeEciDnO$'?U3_^YPK1cr2,;hqJ\g!]5N'Tk;M;Q3^#OX%g%s)!9?\lH;Q"3*oCk"#&prLu"a5;V:1*/';6[[XH*phX\Z:&Pq=L$)]?*W'H[k9_rSYdes7sV*b3k2E7JG_OX*)-_[0HQ8f8mt=%*adJ':L8GH.keTJg1TpSf3a$8>/O][>HO%(SlTXjGu%Lk%Z>C$IpN(ET$jp*cX4p9q4[6s^V6+.TD"<+L]1BGO.Q8kqXMj0^<aSY%rZ3,aIJQ,Y57A%mf=A(ho?Zsm"9(@Knq0I-F\+[0H+u4s?aogr<.<rSjG0EMh#$&0?N.A`57LEHf/I"6:C#WQpZ1KLFR"/M[/]Wl%PFq9V`78ob#8_=Hj&`s.Qu0SZ]9",S%0-07B'9(RIU0pr@rl!)^CT:Y%J`L7VX=BF3Ig-mC3d-&Nj&K^A7kSb`*`%_4PQL_HrK]#%GrU..eTQk37bmY7Z/qrDh_4hubY=.#RHpPBF.7U<+.-#t?+=pI3G"^S#NSN)Irq^"[;T^@h$Z=!pL1`2\n5:Kp"-u^htc;>:mC"^%d:PPQqXI?60c"\M[k-CWiHoFSn^kKrR@;tRbk($72TjRur*4t:\F<Xi%hG,C4l]Y8V(_D+q:F5:Rj]l;Y>u]Up[MhL4Iprqrq4e,%m7.9-F8(#EhIie#p\j^Im,[-Dgq`1/Of-YMj4EP5na1[a^V;jt^*-,#G?khA_gQG3Is^)boRX]V-P)in0?(H*KgU:7`^f2u//jTo%dcfKGPF'\i?#BQ5fDWVM$a%gubOa6A9[Cc&;2i3UbHChdr,K$%bZC6[^\_Q1)2A"r];%P1Ik[of^!2H?o,#`=ju08e=&TLqH?WpH%^Pu!LeZV0p1uBE2a,c;:oMOi0r8Ao,r<_5RkLFX!o&Ao`b#N5,FF)7#5+OIl@lVuIfjN2Lh<acl(R%':WNP>iPi9A\]u+H`eU)f3%\CIqals$MJ]C&+"cY$F`8'`jYSipYeL.=H#["_r%rSAG1Y=C#$>Z^/eG3mR'r7:aUkVQ@j`V$L2dDm'@HPq;OK5A"$>!2t[``p.N%Am`"Cm-&&^5KVIsQrj\>qh*qZe(2m@UCXKc\WtXpaMNRQC\1WQFR.f;kI&mna16,jp?("Hli,bW7&r@TIap1iBrC'=0Der@C,NH:%^r,?;Gd$j_/"&'RXo.sJCXl5YZe"ndlZ;C.(-ZZfRM].&Xi\]J9<C^"'76k%-YB_C4[(XUReb>-V):2NhUd(Zr;CX$=o[0qf)3s!%DeieJC9"\OdJp'9o$QZ?CO%&J[pEoH*OJl0?hi2eoldaNG4hu8p%J%7>jM?TM1'Zla1&+Kp%d.ca4Aj$iEg;@mIa(eqs@NnCNk,G%Z*f(mES3AmW1LDWa5;;`SM%=B[_?[^IrAWLZd3r$o,Cao]k>eIH3U6n#C;-uhlc[3c9/+Q`\.,&p/E\'*qVG`ijc&(-[Zk_hNM:V%%eVq$5P`qf3OnU`kOJA[ml`K(Y?-%AHsZ;*o:P0+H58_/>O#AFIc5W[+2'`"=hS'ee+9`*qg=nplKS,Mde_CuGq;bJI5#Sd%T_Zq%a1Z,XHHqiJ]KG:rE&I@_XIT%X%erQk]u()Elb-dYnQE&8mrE=`E21,BGiPOmiR\=H]oQNMHf$p^o(c2PZ^'fIn)F3&7.9]e=2+FR%[u%BHGJ1nH]q=SrT&,IgNUu"t]p7X7Dg()D=+B\\l^@_.Mh.k@^7M/k]7#>+B(l'j5<mumWu`g>lO0iFj1bBMQg]?d$YQTUR9;>u%pWQ?kot;2J%t1YM>tjmm\&Y-7ID!>'gp]#pqk7s&`PR)]iRa!g^9c"\mJb[hX,4"YrdhO3(]-_+#!_gNQQ%=NnT&BOs5D.Pao:O>%GGY?(ri?"s(CLnor@=lG\Goj\jkKd\7u-"!\%`s%rbl/X0))"*DB07p[Q"-"i8OC1JbHnLfmlj]%gL%?c%gkj#?*uqr<#jUg;:X`%[tc=5D[,W(%(q)_FE:ib3q*5u45n)mam=>#i+d(QI;n+RI;Ek=kPj4%^\4Wipu'\TO+YmhVg`T6Bk;X1q;^P2_=`GSZbashq_&.t%j1E^Tj2LgIK9q@S+,Tt9S=F7%[<LrG6a;[36PJAJjj;eH#B,B(LfPLAF0[PTo^Ut]f$O-^Zc/W5kpd0K:+u5J%o2S0%H!cq>olb!%Mj)&>5$t[PT73EG(g_)%D@aL15-mHNosD+\Hnb@cShg6B.#3rag$b[\m=>e],Os7LpQ7tlr8G^Qf=*R,C>a2DjPB(GkE4#aNK5<>%#G42=>b6E?0KM>/pM&.>dk@I,T(Qo[c@2m=7pk,B4W7UUnb.?PUZ\A$o\5;Z*kgocS\"[d%=RK3^1X(^^V';[m.A3/\Vhg?pQi6?%HLJQE[-[3tI<BW*N].L#a*LM;*0-$O:QCI3nZf'uWL)Mo`tj\Y:WM&'7lU/7j8+\=_tNEpZ)bS4<I8ia_i&[XfK<n5hER4%Zkq;J%f%Xtu&,Y'"$`hV-8'atkme8hf&+>RmI_C"kDtf"`1KVmdhd7;:FSF[r56$";">S^3^AN8_)B,&j=Llu=_s1+OGZ$]>>je`Fp1DpW%buZMs-h:Nk5<lO-eSi[TiVR4rAU*+VDcAC6l=mP9e'+>NP@r'S[f?6@PdM0WUNZ3Mm`7$)I"#_cNjPG4m@BMQ^G#9j]&D>-',UW:%=#Uf,Y.E^OrS2h$q]<@fMgO.OX=mRZrVlfXbc%.YQj3K[GG@>#m7?-2hg*gti@eHn72S0-\IA.Wl3U7!B)9F1rMAJW27?S?n+T:L%*#Y/n'XRW3/3]K9^CoG:?MP3mO+r\Sp\N]2)YrT,We\'ULcp+]H/WUDS$[rbqttO]?#7Ee]NA@`&"c!Hb6p,T5/3_;n1l(:4T8CU%/j6YNh-!j_V[(eul;r'(&*pD\IBqc%_gCDg#ObuYO$DlCM9^G>FSst?rn7(_Ru,h$rWdiZ8#HmqbgRpMAnM?%*k[p>[.n$UrV>B(%bDg98@5ZOR*^61kG49HrIr#&B7fGCFnGDYNY7kE,hT\_fNbf5%]\M/sReX2>[kMgq4LiL[:D_;(-Y>;%9tjjLR@jEJre7HQjOqB&%^n\0>RDVOY0@)jG=uokmI^JY+hX%$/Z]4hOrM?Fd+&=1ApipAK^\)jKq!`+"p%d(qPhYtP0K$?<DJs9<DgcipgYg*No\dX)Dq"B[%X5iGuZg)r7oCUMgl*Ku`dB<J:p<+%,1M%@MB3$W<T?lkA5$aZFH[E.`S!IAebW]BK[q@q-mn_3"I=8@UGCO#k?uA#d%*u&)Ce`.p%N#]TZ1:[>NilQiMqt6/>4,9k42O?$LT!lXo-_?'tr;#UTn4S&LdnfpH0:mV7*BnsReI+1ZAs^gST=s'QRs]BAEjRcTn'/`1r7(6*%\,"Pb>;Pm.lDNgkLTg'fkEA!@UX*#um!j>q^U>r/0XUK2@U\9pkHtJM`G3ee#FC?9q>B(.`"tMke\AUL3&S"O^\6X@Mdb(<HSKe"%4nI[Xl@FBRD>HQaj_3B&IlS8,5.k,2]e<_65Q!LQe:-rK_:%]5atA,+\[o9BII;&ng$WeN0$ccYGd[J2o(1tDeu.?)=8BsPc`<mg%W5#D5ea@)jIQ_e&\U+4qI7pcqo)2(^O'f%R?b*p-Ye'Dtrp.gocV)/gDd#:G8)NAdNul#<*ZnR3ZZisl\N7%(f"4!A@:=QVrQ=/%%X64CB*3P"A'5$XNroB!Fh1<+Tlbh1%^8la3C2\<=rI+,&=[1f7S9l3IIJWY\BlrRTgV(K@>OP%rp8)u>T2mo.IJR@Cqprd'mecPQ%`CKCSg`&J+Ilo[&pqc<'N-n`HH_3N=J)6^n3'=IrqDcrRnG_Igc*PMfX\\>8Y5V3-?B/rQ>(*faq!%Fq;>TW<@diKVf)+:L#AI`A%97(f(m`YNi8RJp_mZ2f;p@D?mB26\0f?YNk[l4*F2a;1BHG$]#nc&(Lb/W!0nuL"?YEtS7f=':s2pXuP?Z5%mQYTn*>:UNP_q+(h%r5Nom\+ab:eQ-h,ID#8^GfN%P_Tq_jqrsZHR0Tp>h6ZQS]1_I.YBCG#+1j[Kh>H-Xb.s@W_i*!p^3b"n@"8"On_3uiiVE;#s#Br7%i77,fLP(eWMrK/6Mp#>rhc;q$*e-9+S"D[A#EH5'f4Lr/iPi:4NMD8MYO^)Q/$j<PoCdG"q!l7ej5\JZan(_4TmH3=DU<bnft(Nb%SDHp+bL>Y#h"p:7k2aE9>:oN>/['QtH?M@'HJ[3P4b'"2hq.$MHHo`t]lX1_rFtZsb=Hr*1#0NJs,`$7-!n8[`r9)(`cb/&s4\i6%GgW-6d[6L]HqmG?$_d]46:0f+ih.__qM3!Yo?b+mjkcrJKi1OYS#:cqG<jlOV5AK%(1Ea_\Xh>:jE?"?\l;Rh.lUCgeaIgtl!u_O%\-XEO(JUsc?W0L+qDLm?F17c6aSpINZs(i6SgJRY_`[0(s5$.Xh`oE9O54]G.dcj%k,R5*VoecGa9:Bq2qu!a`mN2RO7eKMa-CU0%e+%hGAFIh1%e%-:[r\>)D%I\u>oXoUM3lj[Q+uVh=R0SdhHN(4mi]HQK9>&RoXm3V+,_j.eH'7e&H*O_RJqhr:O'tC_<(1k!;G6+%=5W@n[Wd,Oh?:W>]"?_R]Rg"<RLWj%@t=PCGJA"15Ml>'@]'644+$?Z^_C^6d)G*D];,VU1j*u.OJ$g^G4LE)+hO=_+.mH>*1d#p%=#et6dlmBaN1H!</`bU<H0KLm"A>BXd'@>Ze8AJKl$)/T@]B?DYF?V11\l7.=QQl;F:F*,U$$!NHj[9r]BB"_j&>a?>AE&bi\r-G%,arV_Hh1V#Zf_SnfK&tk8E'-'NF*%.rucGK:"ShqmJg:qq00;/Ab,VW2uBT/0<<?(XQXl;2VMd"kXHFSH^?MA/>(A%l]1=VisS+r%p=m)RrUVC"rPL,_3nU5!p@6D]TXXXI@VYiS,p_pr!d]#PUJ623rqCie\(dhDE7Hl7cB"[ZY*eSSe+:>3E;udOSZo`VYWd35IAb#K%56&-Th7gSS`R`&V:33U'pA;ndA%^GT450P_mra`cffH[R96-lTjc)t5n&HfVFL6&]kBSKSmW`poT:HYF=1q8MU=TRkgYX<[m%ql"%H5#)]<Q+e*i:?(BX;Z6soaM`)7s/m.-2g3'Xn*KWrnG'#5<?<r*4W]:\IrHPYRC)saNnb\bg6:1dC;(TJ"uVsS^`?8qqeP!J&?iJ%IZ;+i\ap_hU[O2o\8BRYSm8_5O7$%eg?7gMp[je=lp#^+\CtbBhecngZO7Z7c!%olp"3f4oo=a?BV4YXD-V7u8G/HI>M#+65P,VI%EcUofNm&:71VX(65P;Y@h[mhTkDi\3Vk$KAbYR<U3YQN!h1"^5CBje<S@*jfZeqA<QX8i>45m[?)5ZNQ/aiIPrJJS+S(`5F:YEC)%pCniqk9Iemg\;q:rCt>]Z`Q<r$9MMJZ/Y,SIJ%rZ764\<g=?3kl0;kJrYq(r\]*BRLBO"]Il884[<m&%Fb_AZT)o[2g_o.Xlc.&g%l(+>:pA.]YY]Y?2D&U!1rH,VtIVpL$3l\EHCSCcMe_/2C4Pi!ndK_L*LU$H?V`,^\ffK,a?#J59a4&61+%ka@io-l6qi-F,_66`*%K<G3Qq>/:ia`[d.!K$.-n!=ej0?2neQYE^;-Y..>R;VtA-3(s!D$\ss`rE(,JB#RQY+a+R0acTQpYna\bI_-<nu9scq,rQuDfjPR%<*uHuC8XPoXVL[-/jIkI^T68G_$.PUo0\!Fq3S7aHV4;;p7F+?WAF?aWN5<e3^Y^ZD`>8-103Z50DX_?r:!FLrn2.gmMF\$5#pFn%\Add:O@.cYZZ?$;i8_!&ZcLa8Mk.<'Y'_8:dTlT`bK]?rIl!4:q#/5,Zo8K7a(=os2bs(,G/hRph%kP>e7T-gdOs5&FZT_EJ(&OP%#GAlE:1nW\^UM0&q!Hh<?TWCi?2ghDr5et]l`7&q?sA*taNWoEaj0_J%8h6aj5]6b2FI'`rt+:>o0\5@?3VHjkG"!0rS7)0FR/Fg%#E=oGo=\KUGa(GjE;.-ArpE!rJ+rCo_>ZNec%#:FJ,>r^kNP4Dlp$pnqk$$pFqc^CiO`5Cq]#=Jo#CLFEJ*0IE/U?+IH-c/)^jB1%46Jit!e9ES6_,f(X1B).9uT%Lp7J>Q%8`&aL?<*_s*%*48i:e(1+?GZ?+#ZK4t$7>XEPP7CtHc50;E;qknDE:FAo8]pX&44lZ;gL%#ok=]T!23XbW0rqq"JpF&#&BbW95mB9;G`O01u8U0iYCuS[I9+eSX=eRS9gjh0)bFe$@LM9!`B7GdGf5>3,PBc*!Ns&!]ek)j>'8%jC@rWh0c<X5"'o!cq_bbfCcau)K-%b\_/PZh%Gon`C5=EPZ7u9@e-Y//dM1qGt8_f+]khTBPN!XH_p)>#U4Ff-cEO9,1O'-#-N,d%j)"!%F1H2OOI](IP9K`MD^^TS(p/bKeZkZs5uS-]a3&'o2@`G:U,m7\d[4<?94P>GCTNkO^)_!-Ua`fsNm:4[D7dqYC%@s'f-34q%C!Io"&cJ6=S(HIKgNEuHO"a.[-h!1.!H?1jbZ/[paq7^0gpU(+fj(pP9&2,p[Z`pJMnEntjl(Tq`A6+KbPTeN"C&tmAI?d4n*OuJ%I3afO*?q][D4>(30Zhmm4s7s6aikUt+U3jE<miMp"R/If/Yhh3\oN@,RS:>n3!'t^`u^B)PIjtVe'$c]Kcug3$ZBQ3aWs<C2sDVU%ORZg)AcA\ZFeb"_a'lie9VcMX9Xoj7in\-Cn]Xs&]UMToY@NJ`PSnKBGE]!b`c*$@Qp#bP%*0X9TVDABfh!5&AI_Bj18+`0X@#'/%RrM`<c$RrCp5_b*8@JF=_DUIe=eZ_kPBh#']Sg<GfegO$lB"Z0D];C7R($0g=Y&NA]<WXEA)9L619WO3P5"HP-D?Tlad$0Z1--;N%%jL6BrOg@Qjd$7Q?"$<aO)f_qPjC.QI\(Q@IA<p(mPBt29VkEj*UsCIR7a8IAkgk(Ebf<D8hq(lLjd.MA4dIMd`Ne>MATET\;;UO%RJH1moNoHf7`.l1'89QKKk5V,OE3@h=C&1'f$qdZG5KFj78I)-KBtV"WAd9b3=:mP,J189)r-fTQthh#2Q=cB#8,H97IrL!bLUOn%74`![g9U9HVd)-6P:#$Z"s^@H`+>ml1[A#+/'/:=Kp=H]OK''>('3qpp6TSH1uU"fYEVbGYn<g0r[^[B)aZg#TS/\9qI-%"GB]$(%E]#M8$Yh5m.L?spjK,@J;R*;)p:U;7+;iNPG/[LJMFN>#k?8gWFc$'u0.lC1MfOG.r?_6C,$W_J#dir^i2?d`c>nF$L4nZM8[Ta5%`Yg\FG0C\iA2>TWUXMogNAao_Ca^e@Wm5i"d1G!f]M(/P=:/:Yq^ZX3b07_Y>X(p+8JG__._P.;]$Z]%`hpau+q?B1&<$sN8EKq3%QT^(W'/c#69M*WWk[dJXheA6H`?a!eEANId#*EU-*A"3cqo'hA[l&75'Tk=O-<e>qVT[*PLHr*Z.5@))"t-_8X/OGZPAEl(:9at_%8jP:a'@e@0ifunJ@Ls-0.8):f8+k]+0..qYlS?e`ar%&j+nlsVVpY<nNCkuNc]f`?-MSdHD-;)I0;F_(Y8cT:@grekGH5K&,uf2@%rcU3@S"Z1&4YnjW1.S(0j9[[^ANc]j(;$ZX%J"/4b$XSg/^dZ.NXN-")4nmP68\l(P<C4ANj.G%@#n8`EHi4eE7&QGVH#96M#FAc%U?P/cRd`pC\/:?g%6$6E.+lDT@+^@\HS9P0%!n$"0buZA(0IG$VANWqK4`.,=O+K+HQ01.XXoHcaN<4o"qi;e<c]ZUB4tR&4@!b8%$[@SPS[m"V0%.>n@'.^p8D$rs)3l`'>37A.'6[=:$Y+h=Y,m<o&3:'tZ65kd$7ofA*O1mX:F>n'$,F28Z'/Wl]P7[KN-'1"9gi'`%JtV+Va-38/7;"m568saRLF1F51nukV5<7+'Oo$Hg*Af)&8s:!*asM,ESDGiSe5CFGYZU45Y6QUAI4:L\Z/VMIJ+9[Na1F)Ik:6CX%k6c-<0e3abQ.n)^3OklfM)YToK<H:H,rUC6g]C6`+&f.S!lKu1/s6k3i)YpG)5teL?!b7,(ggB1=nO91]SZ3g*i_g"JGmOE?c13u%Ej(r2M`b5[\h4mXl=,V<'2&[TLoI*n,pHU9lr$3.DjBtoQ(nL^,oN6,R4=$0YQ=`bc`/0@1`3VPX?I)]b>]."KM4Cj)RcuR.5.Nq%,FY_T]\^hB7gg^QjZ'eqB'o?n"3XV3^2>d],S-"0j"k8)e7rE'4*]&5R,U.A`>jLB2%SFS;_co*mY[j2?opVPHal@^.HIhDj\hLo%kj!\r-Ir%%3*i7NAH_:)a\uuD5\J"TeT?UXl_PNb:m@X3\qmr,n?1])L.G)]![S=&4`*0$<S"8p1*j%V'2`pQL1b_R7YB)GG_4!:%hH$3c/:]hWI`Z06LkCa6MiT3I@Q)>Oa1ZJlC^Wq,kgZDPK_(OO1?u#64=->OE><%fC[gE'([STi%pAfQ]jrd@RNMubUWsr4@$F<X%W^NUjK!?G[N(t5*Qn2):WAi/FN,UgG)&fb3?N!d,`8^(4h7!e-)T^'='\1P&LTb:=bE1CT?e7Q3+`h=[ALL9In['`c_9aIBddkRj%gXP#>hM="F-^IAg4J#:<6S(q3$q59VE!D^hD2\c>=(7<Gd=07`I)=,r^1@8D#YS\oGt"K(V(olgAlI\]TF%V%9smI+#-gTr%gTNr%Q7X9.SES@fOB"3Xl*G1<>uJVk=P]<g+Z^q?[^+D6gIob7ctsV.T[Cs:kZ'&LYoqhi1?P66?`l*8?3*+"ZGk9Z+D)3<]"0^a%E$iJ%MCDL#WT(.Efg>.#>"gNs=K=XlQcg9OJMO!l>=:;PJp!337n-5o-WWhD;)?os#s6jtjGS_B=+r'I;<FOISO!r)"2fF5?g/qU"Im>q%)h!6*n;g\s6R1V'O_R$m1oE\Pfrsn:7Z;EM>hPTHV-tKu,0E)k\&;EiWG$?mVi%bpCFVUr]JX?82Alc<OHe7^)Q<6U'9/P.EED\@%,nuOid7*%q3.4%l0kRnha@m=IdF1[qOqi+PW.1e"U@bcm*q'q!8uNl=N2MO:Q:l(O6H"+/3a9TX'I8,P]Af.DL0_=C<Her_GJ@E"%:JB83<>3$fYS.bUTP/nGKIXdRKL_Lc%l.9#c+A)rKD8qG%"n=b#4@kh*S&#[Mbu*HGECpAeq61(@st*aR"2M()_b;$;+3EaO#"N@%%"\TZ,C13t<saIA,M=J[&i,*A-G.C8L%1BZZ"(5nTH1:6"]rb8FtcJ>-U&C?j/O@\MPaqK"3UclnBDAni=\Gu>=_oAIe))_>rtRf%@N;=CkV"i>J:;MflsX0'D%%%BG=28M<oKlOc4X9Q.0R4u1(U6+P(ZIc+JkD2=,S_p&`Eb!PMehS)E&qhEKXD/nDL`7ld7LfE0r?)%-AG=*5R(hoHmFl<Q$4OEP4cn-1SbkGq^8*je!Zjh6Etg1;\K`YYom1Ncl,>$A=&W',)mYu$r'LKl[#CWOU/Or$rp".HS#Z\0c`^5%n=<%&Ds1$WMSt>(^g\'<8/)u[@mCK`mN\o#GUuSKFV]P.,2?i/&6'H4p!aG(B.,q&N@.L):Bm3mreXs]i5IJ,%<P&'d*jrsd)hUF%%W*_.(R&\u'FquNKYX;eJ-/UX"4.*l.hGH'"n6&j\tSKOp8J%:&MHGj%O4<u+>6#V#3Gt>^.8_Yf5AN6dD?3?"Of$>h#j2JbI%k,%,smDe)@c]4J0MrnW>LB4YsiP;_AX#M`%)L#/K3TI5opS2)8\dlK#A[k$'G[l"ZO>Zp(U3E>#($oAFLB6"%&*b^u#3)Pdco>a@eo1%/ko=cs,7\k<MC_hNX-'CVBW;me;P9`G:S6%"6>,.i?m2$$*mPFOnBG$aD8?_7K,odqEKls_d'5gXFZW`,5E"YR)s*R]nF2WhFHC9%oE%sW]m6@h![:u%hBf2A!/:r'.=r8#+u!#Kqf!uqqV^.0LoI1K5VPe&!moC^E]i?N)K#O_qhiCj7S)n0;kt=i(b,r\kSt;#CmnOG%8"\C@pX!CT?<YGZLfjqZWn<h#C@]=<BDNefp:.R'76Df/DZP$<A4"6Rf/-X<Z\[=VVbu5J&PY6:o^j/q"C\\D\"$AUfr-A'`*?67%HU&k-&R_Y&]jLP7[E&dmV)EE7/V$e%Cp9ARWi$*kb]M<*Z`^g$(=(U:b;o1+%/S<f4:_;P7M]lfH>76]lM1&:9e*3@TDm"nafU/N%Pt_ZWJ.lAcU<.*h=5j*&>C^Wj=K=tp#;3?qAC?!#N0[!g^p64nW496ciF\a&?@.OKV$&$9/*Ntr<X_s?F]iQf$?1u,XS>)DWX1V@%ahVY9#:PT&$DdukNeK1prFNdo#kQ$XL73QGZRHBu\3mK7)uQ0dRjpLR!hI@MDL@(7HJ)6uQ5Y4W=D6]<LqB`E)Ca2o1LQs7*$H=>%D[Y(9dr"c:SjYa;aJ_H_QA,?WOKo/'Hc8&DDT?0qhUn+)F^o(Mg1H8p5A]jo<5Gd7ic__MVts7:jaJHP,?OmqSg@'jCiQ5&oC,P+%o-(4:@Ho[1mu*MWqaBsK-Y!KK!i.84,)GI:Ul%SZ!M%<D/rGeppr7*3OV;:93%c)h$'\QE&DTa8U.hObj^I7gOg,tqk2>%<$Uk`=%N)%20i-n[<p]jp6nsY^T;lYZa#VN>EJ?-Kgj2/B`?S>-J#4%^t]b?Bp1G9K,SeqQ</(M-O#*9.c;fR[f+c6p>#"FtT<2`EHBK.`o%]H'g*H)O+GU9&dF$C3q4VT9N\_J'(h+U,i3Gt==$"X#''c*>@l;\=($DF+?q5fLr$(Cln4!8Y;J3$WH0csjiW,9o<(6o3hI"U0@J%RP`n7'PRf4,BD=?YQG:RaGtsjdZIV=`<8$I:suii$mUQ`RR4.U,r/R6F08qW_D:YQoMX@lV%IYdZli]!1IV_f:H[?K4PSAEU63>b%R79T':5B'TP+XaQ,Pa`X7mo^l=h,CO3adLq2%cu"p7R3]0l&ClKVR@j^0mA(P)(,e4dN<QNQqA/oD?UD6"lrF'^LJ]UpAh0(;F`/%CgPRRgBA\K,.SmVOR$G/JCE#$5]3qPhPbg-oTDnSW).0lNq/'^^^m-H5RN,0(dcE(oTYR6Kl8(q8CgUJ2?:MR4u.qUBF)-JAG?.:%Bp[dT7%FG\&gH+u+9iu'9b7++K9<M"MB\dd0d-B(]b7;3fi$XnWg)1ia(*Nd[jm+6%ME$%JWi$le/87DjCmEr!39*,F%t[>Md[=0%Pb"c6"Y=]U4l6_%m]=-7,]kXp+PRRQJ`Nlo=cq0)lFS`cU&A`)D5;Bo_!!!C@57Z\;N5@?)m53Uq\&V)"pb=!OdABm8lge:*:-Z1%KEaW)b!4aB+T`WN=F;H0>m9O%a='AL(0EF>?lGaIE`D9kN)12WQMZLV:AT.>dZ/mabH:i';&$0&]8$2a%$]@S0kRa92?pt9"8ZuX%[0Dnm.M94CZ;J5hf1<iO,6X3<,J8M/Ui'_C/9PGIX1*mA:"?8rPToUR66K0)iD?!L]VsnY.0`Kk@N/GqaqW2D"S4C#>1$n4K2XoA%Do'n%MA#UOL&m?tIW1iY9Js2(eg>AO@cQVuKubRs8f@E3W4&Xd2Sp9/=9HQ.lM+5filGPQ9f^*-5X*3*Wl,P+H2n1Fq$]gq.rh$q%$8S33"XoRj$Y^?dJB@)8/08mD9M.3G'r1Gm7(li=oqAYuNp\&f(ol8Z/&P"K+A2X,MCt-A;+G1k@(BNMeiXm(,mIWY<Q@u8.-B+&%>2bI!-:_AW:-B55R]K!,$cFP3MmoSrS`Ncf=#7$L*KBt018,>p=`m\,9Jjte.<)TooZBg8;+Ll<%1`ONl;Q[Z&FNLU;UT;+?pJNX%c&YDjCmnTIiGamX;^kS;&[,Q\O=Ie9MGT5tiai1!Es%quq*o3(qB)u^%-Y"L'bPG<GeP@MQp?C^2=h"XRpG(C3DhG?TI<taJD?@$%JmMCXU/[(lS&C-gq5[Ql(X;:<;VqKB)0g`6/>(J92ft"/gI7bc--tf6UB#]l"r(PZQ\S8?m"o;9"/&K(W8khj7=HeM9ctr%Z9"Q`%ks`SLV12I>.]s;Q0^o(,C]h/UOujo"9MA&g&Iise5Z?r5!WgprJ>TQ)/^c@S)hG[)lU\`5$]+WhCbjD&7$Yf1eLQ8)K15&F;/Usn%6GMD5TTDft'_t4`6ibG-AO$H*\Xs9h-o.u/2!>%:W=\/B(]oSb,:&=,l4FW:3+36"4r!8%Q3U:pSBND";.:SsG(<pjZ`4c#&4&Y$%;X5*\@2dfT$(RTM/P@De,^R#CjWP9\6$jQXEXku8>>mng=<-7Qfeup31'h8%JNG/%;0,G3p/b*u6/i2_W/-Donu>h=(QfMS:580R%2+E>%8&\@NK`g9TZ[<<.+CK:&1*/)8$+Y)u(V3P``^Z/hX[EU&;ZL&RU+9"^NsOR#kHKIb<kOiV0[kPcML]`4>j!RTk*iqZ,R5U7%['Z:H?G9uts&X^u3:@R^o.`VDJQK%Xf#65YS6_p4OeB.Y72Q.O=9Ik4^@2ar=!GEd8<Sf`JNcubRK8FkOBs2.jE8'66*`jX61RIR%M,7F%JE+daOC#L1mLWMiL)7Q.OSXi(EssI;7Q-!8+\X02;FKLb9f4j.(j\\g#_fr**&3U'Wg^IdMblSei)iq&1@p,k4&&q$;Oo+o%g,.7%eTFp*2'VYR(r/L9)E@\\?Ab`*0G_Zn3MAop%58oQ@7QL_!uub`6q[qPc)sTaAji2`@Y%@.*C0<1-Ds>S"dCoSmNM-)/G>a@%5_tMCU'h71QV9Aa/I1lfbA.'<!E24h`rMXZ26gm]iA)rV(@j7P]394b;Wu[CJeJ=B)j0mqjajuZl'W6\>"_-H?l,M6N/416P]Yao%`6ms]WgU>:>R)D$`ampI+MGu,ZRN+t@gKIO]O9r*C.\jj+HjMFpXYG*Lj^8be*o>M![4B)E1hs%]-b\<%$"mq.0;/[RXd<C/*IYi%GQVpoggRHR?I]-f@]5LE<@[.)ADsXZ_LXTW;%E1Z5V2tt!AfT?^]VTZR(nt8LgX=ZAUuaV,BQ8CIMHr$UR96-Ab+ncb)p7nYU;L!%A,q>#B-ar=O?eIg+.:285U"MjaYJVI%K5Qa<gJ-)8@"IMb/BDk"PA_+7>nr<!;)$c8oR'p?c6XYC,(-k8?CD7#)Jhkp5_M-i_>q2%cW(Fl9OZ,;-\932H7MsVfJQ)S^g4B['dC/3+OsW@%8C15K[a?tGO'a2UB]X(QK4'n<c/a6+3>;h=TY=-TGM("#0u-YC/;1uZ*:PT%ffGp%eCjas*1STh8Z.]BG7CAOAr]D.'VSX-$o\D47*&Nq?SVc),`k=-VMUg2]o@\C6;$t'E@R@u3A(R3U13tTo37\,nROR5Am#BZ%TSP>N!5\aq=:9X*J[9/Qb8((dn@qOX""g@-AH7-YU(>1\7d+5'mKWPq<``51n;7X+P=.09%BgE0'WAA'#gbJt.AT_bi)!Q!W0f&e%a@tT$=?Q.Gbg!'BnfhlL6b<'-LUEG7L&nPUU7P3e9Hp7::*[.`onT4c$i3#&UB0Lj^aLdP+#*#Z9a7a8)BsuSdNnFOREGe_L5I)+%+>=tIprl-:^i529c.c=NQ1]]!@/#!0as"gQS)Sl#S8CQ]n\jZ0_FCt5L_6jpL3A6gZ(SfTF;(=2)YP&^/9;s!'"J/-!9/LjL^dbJ%=t^"(_Gh30_,T@R^_N^^15;mmR[6(9QQcLU`L2>P`hn9J)+lEG3UFu^0.YI:m#\]ueu3Q=)7^_k21?i6J-;A`^/o1E3C_4n:nFZ-%$Ju__EE:pGa>`sQ1;Sc2@(3.nbA9F5+H1r3E%lUIS18,@fT3=u,lr%ETf<ZA$s:jk#r+ZZDa@l6l!:sXmYZ^nE^bLJcX6WpF9W:6%)JOJ`%%9?T_FbfEcq00$TTZ,.jAkCpN&c^&U)RYX^cl.7i7#g5Ju^@;7R5U@@7uf<h]Na5K/eP%Gof_c"_rG.Mu<UY-?O4SP`797%*O>u;!GPf07ejPW/tl""%?\F`)W\HIYbEcf'6F:hRH!K9CWbF(KI,2U_Fu[1Aa@kmb=dfI>?0uuN=2FY(P:gB'!I6cpT_B=)LJt7%Oe<(?GKBEn/YZrHDjmXM0HOuED"Oon\5R?I/4O*<(reg3h(l7PhuN0VgbM>o2)q:aFG'o&QZjf7a-%m6iAY_Rb"IMZ9o[BTb3MNB%6ZPN/ap@VE?s:WO6)5)dX`Go,To*Dr1C?HQ"s4.'L.mOFC\5eR2@@I_=:q?`ZKZ/Y;D:g-:FSQdeStDq--1jo-;0UW0HBXYdKHr]%hZ5],C5fBPJL,"NP<gK<o;\!\nZ30.F+cUZ2EoCq;3!-AHXMAN&Be>cFi8%rnG18nr_C:7X-`jH)9n3)7`>O_Y6A0<b\4k.^b'SW%LQbW@1<<m6^pY4"2djR8S6m0:h2c)_4mZd:l<(>5!pOWSS9pb9Lk$dF!(E0%3M?2h5XdLUP42cs,D6;4\iS=;PFYR%p20jh.6.]K%DG*?Sj'tikTg#41Pt^8'&NFS_Gq1/[pe[LXimBk6W@C@>jEP-5!JG+XipeRo9A&7fA'*56aIJPuFtoX^+gmI#0ebH3XO7fJfN"Bi%?,.&jaHpH_aXJF3L0Qm/D.F7fitQgC8GeR+!.nkF34C#9_B6l.\]WpB"O>f+lcD<,UROB^+efe=aqLP(jO59,)T,]0XLu$p@UQoL%\2T`1OF<!KZ4BnI5Vd0:+cubH\lLkfLQNHA\E^jp!2hL6g]?ZhF)3h@=<je#L-o$)0`X&TnR*3\*=(]!ZYiE7XGeh!b!b)3)FZJF%Qds\mBmG@4bmh@d(p^k[d"<2=Gc;jSUqoV'Lge9P-cbLsQI:'lfKbMC=\"o;EskSuZN-d?B!-c!W=$0k!G<W<j)N"s=Vc%"'.8fs%At7bCLf>&/#Z;Zs7@[:&K``p`=2"Z.ehQ#O,Ot1?[Y-EqKAQ<f2,uUWjAPP>EMtH=O.QCoLB7'CB,2UPl"OZbKqM=F@VDuII;"@D%8HJl=/-`'8E/=f2H#cNDQ>%Oe$MZ@gGK;i#EQ7F"X##dj!Y.eUS*/aL!]K_Y[,@(8i#C=Xb/>%aBBTU,@P%J.&cdXiQ<hd"_(d6q%SW+Y)@K;_5-78N8j?p'=^4].f1dRh]O<GO0#6CKM,Rnq.%g51/0Fm$U$9E`gAG*1NQ86?Lc6:N=.eM72\NVu7$sS>jnNl=X]E^&I%E\EF=kN!8b[FMJq-3e,Z%G7CH2]!!P;l1/o2LEdP?m$NPNG_aK$l"gT*&Gr:[Eg.0M0b6nn/]j,"!f/^*7(_&rjYCY8;%.g=]*KW%L>aj=aAU"-[fpUrQa,ObTcXCVEOq4.-oI3jVOt-f<TE(,9M/hY:^i6(72d/62r4t#\gBV[o0"#<4%ORte?=b/12&nh#tXqm4BMng%OH%etTEX_l<\l$SH;\4<:&s''3)8C)UfpJ*YVSERMiC"R"37<2=TUGfqOUcG,R9@FOaINm-1R7;.&'R=1K(Kcnoh@"!"3H4ba7q0%N52L=!4F3BiO%!a^<!W_MNhPF.4V9#fWgIq*IT\01ni]cfI\kU:/;IBP)'>fBMl)F>8/s\RZYlQC("2C!&YD%U\nkYc#it8%MTP#%&A]-iAcYRk8cXlaV[Cg=LQV//(o%<F1E&D1=+EE326W6W*8dDMn8NN@P&]\:6WlLV:WSj\66M2dBkKtsBO%<i^Ik<Kn0DJFgEbc+%;Yt8_4/.JaL.ah[VBQ=3Yd+lrq#ED"+_gp7l\iT8e`E2YX\0*(3s?E:WCCmkS_f9[s,eU&N4Z=UZ;Ks.b[4XWfrqc\aGgEG-fI'G%^fs2XeX=83NQr+k[[nhkKBWnQ'9ft(B.Y(\odM@>XN[iuKKu+?E_GFZ."Yipj81%4Jg5QMXJqfG7.#\)VCihA)`4EaLB0:`8QHR8%#HRiTJ\UsjB(g#@c3:Kk:5S9;D@r?>kR=De@#\oqfI"WG9m,K!<:G8h#d;bFJE(<64+O[>Vcis/ANXB<<E8[.j`p&4/#OA0S5Q=#%-WXCbkSqeOh+J=c7'-eZTG.D%q(@tc&JDqD!<D*ZUnioPia0J.GuN#<ejO\ld%!!nK1NX1.'8;[-0"!:ZGWej&[3XCV*7-lf-AV?%!0HhLIUIDP-<o/"/rd7f[ap!cLQJ[9hhl6TeJ]T27I#:F7c%[77#$Rf``YO53;)?oO%"<j05aCGD6])EG;92ae.'K<]_)8@8pVp9%XH_2:i3F8<X-%9e(:Z,BBsO[SJ]TcCkC]?=@cs8_$'\FH!k`$,<u;aT*nfQQd!h:`()d9Xoi:%oP3rs*r=%pFm$0YnW17_mL\)]b%CY82O"E6JLm)iOWX'A#f<h1c8\%6dg3V:jHSCV[A91\0O.F;)U(,%11"OjSZAZ./"jr0gNCdV#i)dZLnTGsk<dc@Z`62Q5pUk0o,%=f0o5C'9XL:MLa[5]GJJ,Q\"772*hkN.Q^k2`_`1^d\l*^#@us<nO&aUK\FRbA@u^("Lr$=1RsD7]YnFQq#F\K3ARp0ibRW+IqNL%;3*FAf,<TA;V3'DYlY%l2r,Hkoe1L[5*g'ri91dEQo3@!d*W/4T@%1i>r6YW(Io."Y#8DUXIPa#l2n[JX[j--W`2t/O+sP">?'Mh%o*A%W&.#/V(!$F<O]TTq'o6@-U*)m5$sssPJKhVNH-D&:ISF7EJT&U0"Y=i$r+Nr1h&@![OL(/o=T2ThMS\O3B#b6=Tt=hRR5QF-%&bHAh</KNZ!JVQr&o0Yd/07sUO`S1)!>P^f`'o\&7MlF6fHJMIBe>oo4kf/bAJ,jbW<kI7H,>k<MZTlUZK>s?&l8t`UnRPas7OH^%;"Kn/M1J\;*+K`rasHlGlH\qjS5#1No`3lH&4Ygg#:*bY`h"(2JnAHa&-n`+UhSDU2j)2^]#$QP?$FPY>#L%[c3'0_+sJ%0VZ<nE%3\cd[:&^p5Gb$]F&?Ao651u)'^d7TBW/MS'p:-SFM.eS$!KI+/8Mn0P<fY5;H.(0@nMN0HQd?"?"p^@KGgo1#m]j$:._q@RPbA=7%LY!?f*kD\0X'FfB6VdclXG`lD6n)(]FQ[<C=B>]?Zq!ML[iWX&Uj`=nLSW@6e.pd`+hjg^@8\)"&R1'=GfY\,GnNB1Td"diF&eG9%PQQW)1BPo)8(XggZrl?6#Fm>B1UU/l7j-_)iWMbX2iUi3%<qCrQhRn\dBETUJP[tq0COg<Sc15W$0VPIi.?gq.,^IOYY1N?'$"II%R,/`".B.P(qo+Lac.IZZ??;Z"3IDCElmX)#`eGt0]Pmpe!+N%,lmV^d%9s'C4$?Hf"G*+o':;F]L5?W@-NNUF?"aM+DLGM)'hT(=%ET*n4,BOZ8<q\:"02`Q4_9h!^IX6\AQ7U.-%DkLo3jM'cJep287*4T@<fdUj)]Ud;IA$/2aoU]f99NLYlO7='dY^rMQ'sQK$Fn1B%5YWLtDKi&pTk5+]eP4FSR.se=o"aj2W#61>gk$!]q@lE4BGB)CS-Gf)-lLsmo3;FDceE9ds/m>!V3maRGRp[5V^0B3f!CBeMI;G-%&I2As%Rf2WY!YJZY9fQT-&URCC\YhC&;O@1V>uo8_]5]X"L.W"k/WS3`h3BG%7pF?_[)B[Kr9L$-&%g_I#47DprJk*"P]SC@JgFb%l]l!%ei:6Q99U^3iAGshg+&O(69g@1JN"'u$P-:)'?>`q-9^>Me;Dh^?lL`C9!7>FCAB0cVKFGOZqj:N:K6TfW+.";,kue1_8/:\%@%g.X(S#UJ$UQMkZ%1*PZ"OCKTNl\BS.P1(*@k&B^bu=Y^^N#r/td3<r;m"$aMI!s1R>dJ4R6&KL%2UE)Ea*e2F8\?"9'P0""Y>J%Mh#=h3JbPdng+?ZMG0-CQ".Wo,>]!\QbUfl`XF,4=,`_[=k+3dmf74V:`kHfi*=-*-rn8W9r!pA68gjT->A/jlEM=dXKj%F,E&$!%JRTZ,B.6^JJjn-2pF4$M;=^Xi0D/08:g27'_Ls08<+je?+39WM4?,am>X8KpB`bIW,D"!&C)2Zo=f2AU6E+?de2Iu:+^H=V=B=i)%B[8Jm@Hbd,Wa[-6q)XgM<`fjQK7`nYoMql@LdtgX.909o0_C`BSEl8F#.s0sOUbVS0Pl3'"VhVVC14,,6XijV$m%n_5r-61c74L%%:4,!0KZHM.5kpiNO?A6aPW6Wl9nC5A>LUR-RA!0jMrS?<8Vb_]WB%m/Z=[d+5!oNOlQnA1?`)%tfSJ:W7#tqX_:DPV&C-3`U^ht'%XO\.L_qb4V0Xq$cj?i">P[oEp4-^S@J_Q"$1XuX[Oh<_$)#uk_p.#9/ZJSN]J4ChLmJu6<IKBmeic#9cdLe5^'G"i5W$RIfNWD<:%M;^Y[LuCPeq7<Fq[o=2S7,jp2.,SdETkC]1;rC;ValEl23Vhek!JY!4BA>8jhp6$@!_fQZhjRLab=X`gEH;VPpo_[slV&MX.T1RS%F,35!EqBdDk7H^1"CL,6%T-VojT)LIO:NY7Ht*Y+/1KMsf5h4GiJEtE-IMAE2<XXY&tqZ$'+1:%KHm(6<3e<:[g_s(PN]duPpQB5%PPC'b2=b,J]#[MmAJ%&i+WU*(B-_Cb)e!Ok5nOa"&POlO!QTu;A=s.PC;L4B.N3&D9b"Ll)SQ2LXCIH,<?>\XP)6_[@r%088\ZTs%Md0sa0K`CBRNgBU3%tJT_>tKbDe_Oq:l^fDXe(b8J54,tcI9U:K,Yf`P*%ca:.*\f-A@O8_p1e!*R*0[e/D\o#,mJmULr^MdH_[N%S+GAl128](;I&e26`l3#%sVAKM?@AneWS")O$#@$[;!B5?g"f-+,T+20?KZpOM,6ON/fA)QtE]j2_pZkopc"4P.8d,SHA.-J9K8e%G;ql#O<s&jVj][UBYBue,G&b[3eo7Mof)V!<BAF/U*:fr^JRr9,#VROBrDk=k6R(*a4]7$JK=Qt7H?K41TVOT,4Zp+[K(ms-*"[s%@m-Ad3UR<6/W76(ljn2.F8Nak=oSX:7El6#fXQ_eH.Er?J].A+cGr7moqaDQ+q:<uWcH>1b(YgrC\.a,?2/SD&ZAsQ8P@I)@[ok1%+%t/fSL'Lt"b4q*2D*_qfK2lA*!B<G(f!e3/5M2S)PG6K7a&(d-r*Y*FpgJ^<XE#bJ,k0:<`c7\)'or_UXd5a<>d/^kp\Gk2H_nt%;6FA]/AcuZNW]+`YT8WCEaC91C;bs5b\JR(;W#[f=8a`9d=<qeGZ6:.c?A.Lp__;(U-L_sL1[Gld&%r_(6N68ka)J57s6B%6<1(K%F;'))?8jl-N[/Of(#6gmPl_KS6*s&'7+19=NkSsSCnTVEq/9EB68:,0lKKD#VLc^Tp]0Xeosj\;%+7LT;l(&Ep$4qoA2UeVW'mD!%Oh0\riI6s)c`HX/r+J[">il`N1H%Ql52?qLT=7:FC=EsO\l!JUH\nt=F4rBqE^belV&pU)3-Af%nn"p!L9(eV'%-kT[KO(eYhg9<%>_!tK"fKC"'5QhmJpEahjH/)PPt&6f^gnu'jWJ[s?V3s$^p`5g>aCM.2d-cCZ2AhFTc<<4Q6q\/i*W78)&mB?-X9ej-u!2./mrWd%US%r-25U\(e@ZU?0rj+3LdfMe,-7Wj<Q'3S2R.i8igYh8H`(STl^#OZH5(\rX`H):#Xh_jAeeBDs)@nRl^L^nnkHo%p8-8D5UOi<%4g6q9<""L?MbN?JYWrQ.Z:M$^aRVk1+e+"V336bHfF(h*Zih^ME8+?kqh*\58ct[(S`t[IE_/Pm!]u&/cWWZlBYbCrPW=/Xg2i?U%^l1:[+>Y2L^!Jai?\<B>SI>+0$T<A6jbP#u8ZHI0-s_]([Z$5-9j:e@fW[KhF[*cARqrD@/_(AI&E'6J996;(4O6g?]!;#<qH4^P%em/GK7[m]TO<P0I=TqoI/k/L5K%.X>m]7@a.mXV1)?MX5.4Z>V?l#HBNhFi/'bjS\&_1C`*-Mh'V<U[h%q)Eeo%[ln&t&.:iaJPm%!CBtUnZL&><F1a4jeN'D*18kor>DijHiQ/.^bgj<q&<&\H.YbNnf.NWbGf%d0c8ur:"*W1pd&I\/TR;=8gtpp8uIX@cg,JN>0FeB%8-1l=PTX_=Dh<%61nf0OAtZpJ#]S<tSfd`h?:Yna;&(7G<3WH]qR/7WNhB0:"6XnW0_o`tb+.2p7N'YoAFsLt+7*E_dA3$LTFi^/%3VTREpK>h/cU=d;Dq7dh^SkR1n>sA<9?h@'=Q#R+/B<"k82&\`DUE,"f74T(4>A(h0fR9FV#D._==()7jMbU31(gP'O_%BG=?3*'%/.'?p9U-A-p+0t1e5Xl':a"QoS;7.\2)@Ze9@On4I>&&;Cn7/lBA!fIMq4-0,VlE_9p)eB*bfH=;mJ4&BmG>B#9'OM$BGJ5(\,En%QGT$6c2_dWAoY8<;cch'/EKX;_5\r-8gV=&]2aL6HKMHI#>!IqULk#j.?;`<JYL[SOg6C$cno<;EX?Sb^Y$,pLjUhBYuW)WDASa@%=";36+3nScF!Mg,W]>@Mo'jJ]3]UjdGKOX<+1,?4Nj#[oKL/V^iV!rniiJCk8U`r(!)5#hU%4^2BS%VY.?88P-58\X:ppGE)$ZCa%R7n>YZ;(WXl6`N>rOEHGW&?V,^-M'Ch)%)!r/s]E#85Z8<<N.#VM75K'V#LGs$n\FCV?G^R\HdSn"lnD#:<SJOOF4c';;O-:4Y>U%\1T#`Q#HAr[5*ED^dc`e8ThSS:Kh31C^uVoR<;$]@'VFFE38;AWVmaeWD_H..aEnVM9r1s5b?kf1@P;;+ZYPS.7r66>.GFjOD>c@%kJu&m9JAnL3ILB$^irdNVh5tJ\u[#2Ug+&"$EDfF?SG2smg>I<id+0\Ih;8$,?4;=d%b='5oAA(>"ubhV+B8RMXm\FXK'NiNWCEF%k&Umbh&$5E!1,Y7I$'0E`>4sH-flZ9nc5,F)(fnpiZiZ+@@74n?;0TrC''s)>Ed779[GQT/AbWQVGYoYOV6WS\_0OK;epNKM;K#_%a[09]O>sB%keJof?XC_Bpf->Km)n+GI7amul,A^$B_CoLq6KHF,!BL/jAI.tU1,Ae/X.a"NF>2>"?!cY7qdMjGH^f;)mG@]Dpgg,%)NKP^L?==r(A6ju$6n,$Td\*ajuuMDH(jHJXRlYVnl9=thI;LKU!@0h5e].[72^m)4>mji[;%:0Ur:\n!85JZ/p3&@`o(u9,j,n(%W?kHagI[h_F'/qUq)utiCu+p`LgsjM/=S*e<3IE'(g+D\/iug.?8gS2/>A/V4f"Cu;KLF#Ud_;s\s._dW^;;fEGUNF(`onk[8VAk%2.N4U4$RMOYGf`f\MRu*d%nXf/TDh9.b[miC-:%F%cq-GU>0O]ErjD0Cb9Z94G(@<WZ5mJ.QB[mi2`,4<qo.Z_e>OZ=K:LCSGqUa%kRPMLnCHI$?Skcn31t_(=j#`_^j,GI.]=f@1,SW-bLF.!SK"IACM?tZeioT9=3B3-XY+kcm/5iWWNTi)!<X#:Z(R7#ZVgOPSOON+%P=i(k#(grKZ73I\SK"IMAM&Oh.WfV=;8O_qoldCn<FVYFP=m>W=7LVgCt)8W+MS'qggXu>V&l5i`tmm>PX9APio9JUSNOEU2L!pm%/P_P;3"9.FP)8u`"=@R9NhrUNQqU=+reihD/0>YlW`1iKl%%r)Mr3"YBE5l+..afkl"@$MQ4Mi:Q,k(l16\9:*]St-<HD_`5mUM?%a#=Ci$L,U/.TZZ[nqD*5''#5U8A@Zqg9<Dj;?'0G!CS<S;?k^6Y":RY1:^A\O8@rB31@Z!Q`3`g31l<J[;dlK1u2D[qJ?L$Xeunc%4BIUE78rI+,)09s:Lfq2h?+d'T2?:B2P6fN#(;qt.i[FSOED==).foP:c,U6qct3f'S@g1DGYGb.UV5?WDp53V,f\'Yj"[6!)0&S%Vt*kg6'8II9f7fJN[]%5>\t5r.`J`XU,\(<=MZjX.nf=<7"\B\O>X+Jrh=j2+uWH'2=9;2kbT4"Gcc7M%lRi"A)6\&&Si7cEr8Q#%jkEpa%[E?q-t>e__oZb('.\d:cW.$kVF@q(#Pcr1.^AmZ"'PS#>#PB>LAjUr@pkoXLOdl%2L$'%D$m7Vb/IN2:CYga81t:uNRG5f%WL(Nf:2$U7dS4Aq2!)SJl)%I3+`*gOP@LY#h5H:`WnLAN-oN/3dI!9*3FRLdcg3H89dW'N'ItaAb=8+n``a`\PDZr.&35;Qm8E1K%dh@<h>PXc#Dip"o:LQ+H*YQQ9P[:LB,S':3$b]EW#n*F$ZKFB%<)>^aPHYAH+hHMbQJ2Y>?8W5C,Zb&oJ67>4P17F=JYc;LqP?tE%Y+_@>Lh7SjG/3)JSSjG=Ajc/\Or_%(j#B#[TT)o,5Qm9&GKX![^'*cF!4#)E5SIX+V)T^6[KIc>ncXW'fQX/M0LP,=9"<kc.X%lp%5>UN79k\H!.W0+$hbo!8;Mg&6aL:a$=[8toX[rq,%(`q0(Sn(XBP\,NJ]nA,`BgQq:_gO@1t`'rEPWF&&aJ@*K".oE):K=J;1PX=%$=F`pZsk0<Q61X]2#+&?(hBmL<TL+[.=ecP=1h/+eRbdNVnf>aGQ`+\Tf<qY8qFCm<K0@L-!$G8;?KcDV=J;B;oeA+TNEC2BV?lE%:nlKVFJ_l')#U,D03;7mo"J!\-CA%QV6ZcTN!?kmWV)RXim(">c`.l7DknMLXp-Op<h>m\p5T#0>-ib:6IJXJU&Ig<Ie*DA4GTA4%DIU-tY>$0aSDH"%85FlBVX@PT_)<Rk];A:15_9@WX?+ptU#_mKCGb>Legt^V%h49K(e0h/TaPC->-W'+BkUZ'Xt""=:%Q'?NoTer%K;O*%k^]QB+E'mWU36r3RRZBjjO3+)YFK!KLgkbb'o^4L[$>=W1kCjX=MU=l8gA'!<Ikl84cX#Tc%k.51_ib-Z@#PX7)P5KO?LM0%\^::o&ou>KoU's9q7^k:0GTUk&'R-OD*gN9%7*7_LuhO)<+@>46XW:j%*p(0MFO"YKHRA8_:VbO@bf-X^"K(2O^T_3_tpr0h'VV[%;Y0:]VFda755P1E5LpAoQRZq^Ej6&W:!Zt[<7L'',\o;uX;+32g/<8m*6\'GAuo`a)SSl&Pb?/S%&r?t7`rBK%':SVAjB+WQ1>Jl%<=Z&RV3,.ea=iGIobH[i$m$ejl;5ntFb-d0Da$leS>Xe]>)?Q.^C+Ij#qWKAB<'HXk_<R.%Q5XZ;\t@pnCgo5hgFB[--g0@"BB0!%IUa!4I4<Hd/t?T<ckI2qMo<2ie$;PYnPS7pOTMX>8kchI.tb>f,tos0JBeApAKtW5h=c9`roK-QSN#^N#=gl=?$dA,s4HSm3&q#a%AEQYcd_0k=F)cJO^=.M8J,2sJa<aRTrr0I)-XH`gSLgjg~>%AI9_PrivateDataEnd